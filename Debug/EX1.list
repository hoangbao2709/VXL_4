
EX1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030f4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003200  08003200  00013200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003224  08003224  000200a4  2**0
                  CONTENTS
  4 .ARM          00000000  08003224  08003224  000200a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003224  08003224  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003224  08003224  00013224  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003228  08003228  00013228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  0800322c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000424  200000a4  080032d0  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004c8  080032d0  000204c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a9bf  00000000  00000000  000200cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002086  00000000  00000000  0002aa8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba8  00000000  00000000  0002cb18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a58  00000000  00000000  0002d6c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000172ea  00000000  00000000  0002e118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d4ae  00000000  00000000  00045402  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082737  00000000  00000000  000528b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d4fe7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c28  00000000  00000000  000d503c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000a4 	.word	0x200000a4
 8000128:	00000000 	.word	0x00000000
 800012c:	080031e8 	.word	0x080031e8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000a8 	.word	0x200000a8
 8000148:	080031e8 	.word	0x080031e8

0800014c <Khong>:

#include "Component.h"

void Khong(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_RESET);
 8000150:	2200      	movs	r2, #0
 8000152:	2180      	movs	r1, #128	; 0x80
 8000154:	4814      	ldr	r0, [pc, #80]	; (80001a8 <Khong+0x5c>)
 8000156:	f002 f832 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_RESET);
 800015a:	2200      	movs	r2, #0
 800015c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000160:	4811      	ldr	r0, [pc, #68]	; (80001a8 <Khong+0x5c>)
 8000162:	f002 f82c 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 8000166:	2200      	movs	r2, #0
 8000168:	f44f 7100 	mov.w	r1, #512	; 0x200
 800016c:	480e      	ldr	r0, [pc, #56]	; (80001a8 <Khong+0x5c>)
 800016e:	f002 f826 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_RESET);
 8000172:	2200      	movs	r2, #0
 8000174:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000178:	480b      	ldr	r0, [pc, #44]	; (80001a8 <Khong+0x5c>)
 800017a:	f002 f820 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_RESET);
 800017e:	2200      	movs	r2, #0
 8000180:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000184:	4808      	ldr	r0, [pc, #32]	; (80001a8 <Khong+0x5c>)
 8000186:	f002 f81a 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_RESET);
 800018a:	2200      	movs	r2, #0
 800018c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000190:	4805      	ldr	r0, [pc, #20]	; (80001a8 <Khong+0x5c>)
 8000192:	f002 f814 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_SET);
 8000196:	2201      	movs	r2, #1
 8000198:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800019c:	4802      	ldr	r0, [pc, #8]	; (80001a8 <Khong+0x5c>)
 800019e:	f002 f80e 	bl	80021be <HAL_GPIO_WritePin>
}
 80001a2:	bf00      	nop
 80001a4:	bd80      	pop	{r7, pc}
 80001a6:	bf00      	nop
 80001a8:	40010c00 	.word	0x40010c00

080001ac <Mot>:

void Mot(void) {
 80001ac:	b580      	push	{r7, lr}
 80001ae:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_SET);
 80001b0:	2201      	movs	r2, #1
 80001b2:	2180      	movs	r1, #128	; 0x80
 80001b4:	4814      	ldr	r0, [pc, #80]	; (8000208 <Mot+0x5c>)
 80001b6:	f002 f802 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_RESET);
 80001ba:	2200      	movs	r2, #0
 80001bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001c0:	4811      	ldr	r0, [pc, #68]	; (8000208 <Mot+0x5c>)
 80001c2:	f001 fffc 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 80001c6:	2200      	movs	r2, #0
 80001c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001cc:	480e      	ldr	r0, [pc, #56]	; (8000208 <Mot+0x5c>)
 80001ce:	f001 fff6 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_SET);
 80001d2:	2201      	movs	r2, #1
 80001d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001d8:	480b      	ldr	r0, [pc, #44]	; (8000208 <Mot+0x5c>)
 80001da:	f001 fff0 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_SET);
 80001de:	2201      	movs	r2, #1
 80001e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001e4:	4808      	ldr	r0, [pc, #32]	; (8000208 <Mot+0x5c>)
 80001e6:	f001 ffea 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_SET);
 80001ea:	2201      	movs	r2, #1
 80001ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001f0:	4805      	ldr	r0, [pc, #20]	; (8000208 <Mot+0x5c>)
 80001f2:	f001 ffe4 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_SET);
 80001f6:	2201      	movs	r2, #1
 80001f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001fc:	4802      	ldr	r0, [pc, #8]	; (8000208 <Mot+0x5c>)
 80001fe:	f001 ffde 	bl	80021be <HAL_GPIO_WritePin>
}
 8000202:	bf00      	nop
 8000204:	bd80      	pop	{r7, pc}
 8000206:	bf00      	nop
 8000208:	40010c00 	.word	0x40010c00

0800020c <Hai>:

void Hai(void) {
 800020c:	b580      	push	{r7, lr}
 800020e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_RESET);
 8000210:	2200      	movs	r2, #0
 8000212:	2180      	movs	r1, #128	; 0x80
 8000214:	4814      	ldr	r0, [pc, #80]	; (8000268 <Hai+0x5c>)
 8000216:	f001 ffd2 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_RESET);
 800021a:	2200      	movs	r2, #0
 800021c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000220:	4811      	ldr	r0, [pc, #68]	; (8000268 <Hai+0x5c>)
 8000222:	f001 ffcc 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_SET);
 8000226:	2201      	movs	r2, #1
 8000228:	f44f 7100 	mov.w	r1, #512	; 0x200
 800022c:	480e      	ldr	r0, [pc, #56]	; (8000268 <Hai+0x5c>)
 800022e:	f001 ffc6 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_RESET);
 8000232:	2200      	movs	r2, #0
 8000234:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000238:	480b      	ldr	r0, [pc, #44]	; (8000268 <Hai+0x5c>)
 800023a:	f001 ffc0 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_RESET);
 800023e:	2200      	movs	r2, #0
 8000240:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000244:	4808      	ldr	r0, [pc, #32]	; (8000268 <Hai+0x5c>)
 8000246:	f001 ffba 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_SET);
 800024a:	2201      	movs	r2, #1
 800024c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000250:	4805      	ldr	r0, [pc, #20]	; (8000268 <Hai+0x5c>)
 8000252:	f001 ffb4 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_RESET);
 8000256:	2200      	movs	r2, #0
 8000258:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800025c:	4802      	ldr	r0, [pc, #8]	; (8000268 <Hai+0x5c>)
 800025e:	f001 ffae 	bl	80021be <HAL_GPIO_WritePin>
}
 8000262:	bf00      	nop
 8000264:	bd80      	pop	{r7, pc}
 8000266:	bf00      	nop
 8000268:	40010c00 	.word	0x40010c00

0800026c <Ba>:

void Ba(void) {
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_RESET);
 8000270:	2200      	movs	r2, #0
 8000272:	2180      	movs	r1, #128	; 0x80
 8000274:	4814      	ldr	r0, [pc, #80]	; (80002c8 <Ba+0x5c>)
 8000276:	f001 ffa2 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_RESET);
 800027a:	2200      	movs	r2, #0
 800027c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000280:	4811      	ldr	r0, [pc, #68]	; (80002c8 <Ba+0x5c>)
 8000282:	f001 ff9c 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 8000286:	2200      	movs	r2, #0
 8000288:	f44f 7100 	mov.w	r1, #512	; 0x200
 800028c:	480e      	ldr	r0, [pc, #56]	; (80002c8 <Ba+0x5c>)
 800028e:	f001 ff96 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_RESET);
 8000292:	2200      	movs	r2, #0
 8000294:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000298:	480b      	ldr	r0, [pc, #44]	; (80002c8 <Ba+0x5c>)
 800029a:	f001 ff90 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_SET);
 800029e:	2201      	movs	r2, #1
 80002a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002a4:	4808      	ldr	r0, [pc, #32]	; (80002c8 <Ba+0x5c>)
 80002a6:	f001 ff8a 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_SET);
 80002aa:	2201      	movs	r2, #1
 80002ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002b0:	4805      	ldr	r0, [pc, #20]	; (80002c8 <Ba+0x5c>)
 80002b2:	f001 ff84 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_RESET);
 80002b6:	2200      	movs	r2, #0
 80002b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002bc:	4802      	ldr	r0, [pc, #8]	; (80002c8 <Ba+0x5c>)
 80002be:	f001 ff7e 	bl	80021be <HAL_GPIO_WritePin>
}
 80002c2:	bf00      	nop
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	40010c00 	.word	0x40010c00

080002cc <Bon>:

void Bon(void) {
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_SET);
 80002d0:	2201      	movs	r2, #1
 80002d2:	2180      	movs	r1, #128	; 0x80
 80002d4:	4814      	ldr	r0, [pc, #80]	; (8000328 <Bon+0x5c>)
 80002d6:	f001 ff72 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_RESET);
 80002da:	2200      	movs	r2, #0
 80002dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002e0:	4811      	ldr	r0, [pc, #68]	; (8000328 <Bon+0x5c>)
 80002e2:	f001 ff6c 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 80002e6:	2200      	movs	r2, #0
 80002e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002ec:	480e      	ldr	r0, [pc, #56]	; (8000328 <Bon+0x5c>)
 80002ee:	f001 ff66 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_SET);
 80002f2:	2201      	movs	r2, #1
 80002f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002f8:	480b      	ldr	r0, [pc, #44]	; (8000328 <Bon+0x5c>)
 80002fa:	f001 ff60 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_SET);
 80002fe:	2201      	movs	r2, #1
 8000300:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000304:	4808      	ldr	r0, [pc, #32]	; (8000328 <Bon+0x5c>)
 8000306:	f001 ff5a 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_RESET);
 800030a:	2200      	movs	r2, #0
 800030c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000310:	4805      	ldr	r0, [pc, #20]	; (8000328 <Bon+0x5c>)
 8000312:	f001 ff54 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_RESET);
 8000316:	2200      	movs	r2, #0
 8000318:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800031c:	4802      	ldr	r0, [pc, #8]	; (8000328 <Bon+0x5c>)
 800031e:	f001 ff4e 	bl	80021be <HAL_GPIO_WritePin>
}
 8000322:	bf00      	nop
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	40010c00 	.word	0x40010c00

0800032c <Nam>:

void Nam(void) {
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_RESET);
 8000330:	2200      	movs	r2, #0
 8000332:	2180      	movs	r1, #128	; 0x80
 8000334:	4814      	ldr	r0, [pc, #80]	; (8000388 <Nam+0x5c>)
 8000336:	f001 ff42 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_SET);
 800033a:	2201      	movs	r2, #1
 800033c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000340:	4811      	ldr	r0, [pc, #68]	; (8000388 <Nam+0x5c>)
 8000342:	f001 ff3c 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 8000346:	2200      	movs	r2, #0
 8000348:	f44f 7100 	mov.w	r1, #512	; 0x200
 800034c:	480e      	ldr	r0, [pc, #56]	; (8000388 <Nam+0x5c>)
 800034e:	f001 ff36 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_RESET);
 8000352:	2200      	movs	r2, #0
 8000354:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000358:	480b      	ldr	r0, [pc, #44]	; (8000388 <Nam+0x5c>)
 800035a:	f001 ff30 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_SET);
 800035e:	2201      	movs	r2, #1
 8000360:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000364:	4808      	ldr	r0, [pc, #32]	; (8000388 <Nam+0x5c>)
 8000366:	f001 ff2a 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_RESET);
 800036a:	2200      	movs	r2, #0
 800036c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000370:	4805      	ldr	r0, [pc, #20]	; (8000388 <Nam+0x5c>)
 8000372:	f001 ff24 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_RESET);
 8000376:	2200      	movs	r2, #0
 8000378:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800037c:	4802      	ldr	r0, [pc, #8]	; (8000388 <Nam+0x5c>)
 800037e:	f001 ff1e 	bl	80021be <HAL_GPIO_WritePin>
}
 8000382:	bf00      	nop
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	40010c00 	.word	0x40010c00

0800038c <Sau>:

void Sau(void) {
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_RESET);
 8000390:	2200      	movs	r2, #0
 8000392:	2180      	movs	r1, #128	; 0x80
 8000394:	4814      	ldr	r0, [pc, #80]	; (80003e8 <Sau+0x5c>)
 8000396:	f001 ff12 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_SET);
 800039a:	2201      	movs	r2, #1
 800039c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003a0:	4811      	ldr	r0, [pc, #68]	; (80003e8 <Sau+0x5c>)
 80003a2:	f001 ff0c 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 80003a6:	2200      	movs	r2, #0
 80003a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003ac:	480e      	ldr	r0, [pc, #56]	; (80003e8 <Sau+0x5c>)
 80003ae:	f001 ff06 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_RESET);
 80003b2:	2200      	movs	r2, #0
 80003b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003b8:	480b      	ldr	r0, [pc, #44]	; (80003e8 <Sau+0x5c>)
 80003ba:	f001 ff00 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_RESET);
 80003be:	2200      	movs	r2, #0
 80003c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003c4:	4808      	ldr	r0, [pc, #32]	; (80003e8 <Sau+0x5c>)
 80003c6:	f001 fefa 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_RESET);
 80003ca:	2200      	movs	r2, #0
 80003cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003d0:	4805      	ldr	r0, [pc, #20]	; (80003e8 <Sau+0x5c>)
 80003d2:	f001 fef4 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_RESET);
 80003d6:	2200      	movs	r2, #0
 80003d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003dc:	4802      	ldr	r0, [pc, #8]	; (80003e8 <Sau+0x5c>)
 80003de:	f001 feee 	bl	80021be <HAL_GPIO_WritePin>
}
 80003e2:	bf00      	nop
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	40010c00 	.word	0x40010c00

080003ec <Bay>:

void Bay(void) {
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_RESET);
 80003f0:	2200      	movs	r2, #0
 80003f2:	2180      	movs	r1, #128	; 0x80
 80003f4:	4814      	ldr	r0, [pc, #80]	; (8000448 <Bay+0x5c>)
 80003f6:	f001 fee2 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_RESET);
 80003fa:	2200      	movs	r2, #0
 80003fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000400:	4811      	ldr	r0, [pc, #68]	; (8000448 <Bay+0x5c>)
 8000402:	f001 fedc 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 8000406:	2200      	movs	r2, #0
 8000408:	f44f 7100 	mov.w	r1, #512	; 0x200
 800040c:	480e      	ldr	r0, [pc, #56]	; (8000448 <Bay+0x5c>)
 800040e:	f001 fed6 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_SET);
 8000412:	2201      	movs	r2, #1
 8000414:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000418:	480b      	ldr	r0, [pc, #44]	; (8000448 <Bay+0x5c>)
 800041a:	f001 fed0 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_SET);
 800041e:	2201      	movs	r2, #1
 8000420:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000424:	4808      	ldr	r0, [pc, #32]	; (8000448 <Bay+0x5c>)
 8000426:	f001 feca 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_SET);
 800042a:	2201      	movs	r2, #1
 800042c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000430:	4805      	ldr	r0, [pc, #20]	; (8000448 <Bay+0x5c>)
 8000432:	f001 fec4 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_SET);
 8000436:	2201      	movs	r2, #1
 8000438:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800043c:	4802      	ldr	r0, [pc, #8]	; (8000448 <Bay+0x5c>)
 800043e:	f001 febe 	bl	80021be <HAL_GPIO_WritePin>
}
 8000442:	bf00      	nop
 8000444:	bd80      	pop	{r7, pc}
 8000446:	bf00      	nop
 8000448:	40010c00 	.word	0x40010c00

0800044c <Tam>:

void Tam(void) {
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_RESET);
 8000450:	2200      	movs	r2, #0
 8000452:	2180      	movs	r1, #128	; 0x80
 8000454:	4814      	ldr	r0, [pc, #80]	; (80004a8 <Tam+0x5c>)
 8000456:	f001 feb2 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_RESET);
 800045a:	2200      	movs	r2, #0
 800045c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000460:	4811      	ldr	r0, [pc, #68]	; (80004a8 <Tam+0x5c>)
 8000462:	f001 feac 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 8000466:	2200      	movs	r2, #0
 8000468:	f44f 7100 	mov.w	r1, #512	; 0x200
 800046c:	480e      	ldr	r0, [pc, #56]	; (80004a8 <Tam+0x5c>)
 800046e:	f001 fea6 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_RESET);
 8000472:	2200      	movs	r2, #0
 8000474:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000478:	480b      	ldr	r0, [pc, #44]	; (80004a8 <Tam+0x5c>)
 800047a:	f001 fea0 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_RESET);
 800047e:	2200      	movs	r2, #0
 8000480:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000484:	4808      	ldr	r0, [pc, #32]	; (80004a8 <Tam+0x5c>)
 8000486:	f001 fe9a 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_RESET);
 800048a:	2200      	movs	r2, #0
 800048c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000490:	4805      	ldr	r0, [pc, #20]	; (80004a8 <Tam+0x5c>)
 8000492:	f001 fe94 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_RESET);
 8000496:	2200      	movs	r2, #0
 8000498:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800049c:	4802      	ldr	r0, [pc, #8]	; (80004a8 <Tam+0x5c>)
 800049e:	f001 fe8e 	bl	80021be <HAL_GPIO_WritePin>
}
 80004a2:	bf00      	nop
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	40010c00 	.word	0x40010c00

080004ac <Chin>:

void Chin(void) {
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_RESET);
 80004b0:	2200      	movs	r2, #0
 80004b2:	2180      	movs	r1, #128	; 0x80
 80004b4:	4814      	ldr	r0, [pc, #80]	; (8000508 <Chin+0x5c>)
 80004b6:	f001 fe82 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_RESET);
 80004ba:	2200      	movs	r2, #0
 80004bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004c0:	4811      	ldr	r0, [pc, #68]	; (8000508 <Chin+0x5c>)
 80004c2:	f001 fe7c 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 80004c6:	2200      	movs	r2, #0
 80004c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004cc:	480e      	ldr	r0, [pc, #56]	; (8000508 <Chin+0x5c>)
 80004ce:	f001 fe76 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_RESET);
 80004d2:	2200      	movs	r2, #0
 80004d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004d8:	480b      	ldr	r0, [pc, #44]	; (8000508 <Chin+0x5c>)
 80004da:	f001 fe70 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_SET);
 80004de:	2201      	movs	r2, #1
 80004e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004e4:	4808      	ldr	r0, [pc, #32]	; (8000508 <Chin+0x5c>)
 80004e6:	f001 fe6a 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_RESET);
 80004ea:	2200      	movs	r2, #0
 80004ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004f0:	4805      	ldr	r0, [pc, #20]	; (8000508 <Chin+0x5c>)
 80004f2:	f001 fe64 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_RESET);
 80004f6:	2200      	movs	r2, #0
 80004f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004fc:	4802      	ldr	r0, [pc, #8]	; (8000508 <Chin+0x5c>)
 80004fe:	f001 fe5e 	bl	80021be <HAL_GPIO_WritePin>
}
 8000502:	bf00      	nop
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40010c00 	.word	0x40010c00

0800050c <display7SEG>:

void display7SEG(int num) {
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	2b09      	cmp	r3, #9
 8000518:	d834      	bhi.n	8000584 <display7SEG+0x78>
 800051a:	a201      	add	r2, pc, #4	; (adr r2, 8000520 <display7SEG+0x14>)
 800051c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000520:	08000549 	.word	0x08000549
 8000524:	0800054f 	.word	0x0800054f
 8000528:	08000555 	.word	0x08000555
 800052c:	0800055b 	.word	0x0800055b
 8000530:	08000561 	.word	0x08000561
 8000534:	08000567 	.word	0x08000567
 8000538:	0800056d 	.word	0x0800056d
 800053c:	08000573 	.word	0x08000573
 8000540:	08000579 	.word	0x08000579
 8000544:	0800057f 	.word	0x0800057f
    switch(num) {
        case 0: Khong(); break;
 8000548:	f7ff fe00 	bl	800014c <Khong>
 800054c:	e01a      	b.n	8000584 <display7SEG+0x78>
        case 1: Mot(); break;
 800054e:	f7ff fe2d 	bl	80001ac <Mot>
 8000552:	e017      	b.n	8000584 <display7SEG+0x78>
        case 2: Hai(); break;
 8000554:	f7ff fe5a 	bl	800020c <Hai>
 8000558:	e014      	b.n	8000584 <display7SEG+0x78>
        case 3: Ba(); break;
 800055a:	f7ff fe87 	bl	800026c <Ba>
 800055e:	e011      	b.n	8000584 <display7SEG+0x78>
        case 4: Bon(); break;
 8000560:	f7ff feb4 	bl	80002cc <Bon>
 8000564:	e00e      	b.n	8000584 <display7SEG+0x78>
        case 5: Nam(); break;
 8000566:	f7ff fee1 	bl	800032c <Nam>
 800056a:	e00b      	b.n	8000584 <display7SEG+0x78>
        case 6: Sau(); break;
 800056c:	f7ff ff0e 	bl	800038c <Sau>
 8000570:	e008      	b.n	8000584 <display7SEG+0x78>
        case 7: Bay(); break;
 8000572:	f7ff ff3b 	bl	80003ec <Bay>
 8000576:	e005      	b.n	8000584 <display7SEG+0x78>
        case 8: Tam(); break;
 8000578:	f7ff ff68 	bl	800044c <Tam>
 800057c:	e002      	b.n	8000584 <display7SEG+0x78>
        case 9: Chin(); break;
 800057e:	f7ff ff95 	bl	80004ac <Chin>
 8000582:	bf00      	nop
    }
}
 8000584:	bf00      	nop
 8000586:	3708      	adds	r7, #8
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}

0800058c <Khong_1>:
 *      Author: PC
 */
#include "Component_1.h"


void Khong_1(void) {
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_RESET);
 8000590:	2200      	movs	r2, #0
 8000592:	2101      	movs	r1, #1
 8000594:	4811      	ldr	r0, [pc, #68]	; (80005dc <Khong_1+0x50>)
 8000596:	f001 fe12 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_RESET);
 800059a:	2200      	movs	r2, #0
 800059c:	2102      	movs	r1, #2
 800059e:	480f      	ldr	r0, [pc, #60]	; (80005dc <Khong_1+0x50>)
 80005a0:	f001 fe0d 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_RESET);
 80005a4:	2200      	movs	r2, #0
 80005a6:	2104      	movs	r1, #4
 80005a8:	480c      	ldr	r0, [pc, #48]	; (80005dc <Khong_1+0x50>)
 80005aa:	f001 fe08 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_RESET);
 80005ae:	2200      	movs	r2, #0
 80005b0:	2108      	movs	r1, #8
 80005b2:	480a      	ldr	r0, [pc, #40]	; (80005dc <Khong_1+0x50>)
 80005b4:	f001 fe03 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, GPIO_PIN_RESET);
 80005b8:	2200      	movs	r2, #0
 80005ba:	2110      	movs	r1, #16
 80005bc:	4807      	ldr	r0, [pc, #28]	; (80005dc <Khong_1+0x50>)
 80005be:	f001 fdfe 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_RESET);
 80005c2:	2200      	movs	r2, #0
 80005c4:	2120      	movs	r1, #32
 80005c6:	4805      	ldr	r0, [pc, #20]	; (80005dc <Khong_1+0x50>)
 80005c8:	f001 fdf9 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_SET);
 80005cc:	2201      	movs	r2, #1
 80005ce:	2140      	movs	r1, #64	; 0x40
 80005d0:	4802      	ldr	r0, [pc, #8]	; (80005dc <Khong_1+0x50>)
 80005d2:	f001 fdf4 	bl	80021be <HAL_GPIO_WritePin>
}
 80005d6:	bf00      	nop
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	40010c00 	.word	0x40010c00

080005e0 <Mot_1>:

void Mot_1(void) {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_SET);
 80005e4:	2201      	movs	r2, #1
 80005e6:	2101      	movs	r1, #1
 80005e8:	4811      	ldr	r0, [pc, #68]	; (8000630 <Mot_1+0x50>)
 80005ea:	f001 fde8 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_RESET);
 80005ee:	2200      	movs	r2, #0
 80005f0:	2102      	movs	r1, #2
 80005f2:	480f      	ldr	r0, [pc, #60]	; (8000630 <Mot_1+0x50>)
 80005f4:	f001 fde3 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_RESET);
 80005f8:	2200      	movs	r2, #0
 80005fa:	2104      	movs	r1, #4
 80005fc:	480c      	ldr	r0, [pc, #48]	; (8000630 <Mot_1+0x50>)
 80005fe:	f001 fdde 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_SET);
 8000602:	2201      	movs	r2, #1
 8000604:	2108      	movs	r1, #8
 8000606:	480a      	ldr	r0, [pc, #40]	; (8000630 <Mot_1+0x50>)
 8000608:	f001 fdd9 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, GPIO_PIN_SET);
 800060c:	2201      	movs	r2, #1
 800060e:	2110      	movs	r1, #16
 8000610:	4807      	ldr	r0, [pc, #28]	; (8000630 <Mot_1+0x50>)
 8000612:	f001 fdd4 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_SET);
 8000616:	2201      	movs	r2, #1
 8000618:	2120      	movs	r1, #32
 800061a:	4805      	ldr	r0, [pc, #20]	; (8000630 <Mot_1+0x50>)
 800061c:	f001 fdcf 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_SET);
 8000620:	2201      	movs	r2, #1
 8000622:	2140      	movs	r1, #64	; 0x40
 8000624:	4802      	ldr	r0, [pc, #8]	; (8000630 <Mot_1+0x50>)
 8000626:	f001 fdca 	bl	80021be <HAL_GPIO_WritePin>
}
 800062a:	bf00      	nop
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40010c00 	.word	0x40010c00

08000634 <Hai_1>:

void Hai_1(void) {
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_RESET);
 8000638:	2200      	movs	r2, #0
 800063a:	2101      	movs	r1, #1
 800063c:	4811      	ldr	r0, [pc, #68]	; (8000684 <Hai_1+0x50>)
 800063e:	f001 fdbe 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_RESET);
 8000642:	2200      	movs	r2, #0
 8000644:	2102      	movs	r1, #2
 8000646:	480f      	ldr	r0, [pc, #60]	; (8000684 <Hai_1+0x50>)
 8000648:	f001 fdb9 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_SET);
 800064c:	2201      	movs	r2, #1
 800064e:	2104      	movs	r1, #4
 8000650:	480c      	ldr	r0, [pc, #48]	; (8000684 <Hai_1+0x50>)
 8000652:	f001 fdb4 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_RESET);
 8000656:	2200      	movs	r2, #0
 8000658:	2108      	movs	r1, #8
 800065a:	480a      	ldr	r0, [pc, #40]	; (8000684 <Hai_1+0x50>)
 800065c:	f001 fdaf 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, GPIO_PIN_RESET);
 8000660:	2200      	movs	r2, #0
 8000662:	2110      	movs	r1, #16
 8000664:	4807      	ldr	r0, [pc, #28]	; (8000684 <Hai_1+0x50>)
 8000666:	f001 fdaa 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_SET);
 800066a:	2201      	movs	r2, #1
 800066c:	2120      	movs	r1, #32
 800066e:	4805      	ldr	r0, [pc, #20]	; (8000684 <Hai_1+0x50>)
 8000670:	f001 fda5 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_RESET);
 8000674:	2200      	movs	r2, #0
 8000676:	2140      	movs	r1, #64	; 0x40
 8000678:	4802      	ldr	r0, [pc, #8]	; (8000684 <Hai_1+0x50>)
 800067a:	f001 fda0 	bl	80021be <HAL_GPIO_WritePin>
}
 800067e:	bf00      	nop
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	40010c00 	.word	0x40010c00

08000688 <Ba_1>:

void Ba_1(void) {
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_RESET);
 800068c:	2200      	movs	r2, #0
 800068e:	2101      	movs	r1, #1
 8000690:	4811      	ldr	r0, [pc, #68]	; (80006d8 <Ba_1+0x50>)
 8000692:	f001 fd94 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_RESET);
 8000696:	2200      	movs	r2, #0
 8000698:	2102      	movs	r1, #2
 800069a:	480f      	ldr	r0, [pc, #60]	; (80006d8 <Ba_1+0x50>)
 800069c:	f001 fd8f 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_RESET);
 80006a0:	2200      	movs	r2, #0
 80006a2:	2104      	movs	r1, #4
 80006a4:	480c      	ldr	r0, [pc, #48]	; (80006d8 <Ba_1+0x50>)
 80006a6:	f001 fd8a 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_RESET);
 80006aa:	2200      	movs	r2, #0
 80006ac:	2108      	movs	r1, #8
 80006ae:	480a      	ldr	r0, [pc, #40]	; (80006d8 <Ba_1+0x50>)
 80006b0:	f001 fd85 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, GPIO_PIN_SET);
 80006b4:	2201      	movs	r2, #1
 80006b6:	2110      	movs	r1, #16
 80006b8:	4807      	ldr	r0, [pc, #28]	; (80006d8 <Ba_1+0x50>)
 80006ba:	f001 fd80 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_SET);
 80006be:	2201      	movs	r2, #1
 80006c0:	2120      	movs	r1, #32
 80006c2:	4805      	ldr	r0, [pc, #20]	; (80006d8 <Ba_1+0x50>)
 80006c4:	f001 fd7b 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_RESET);
 80006c8:	2200      	movs	r2, #0
 80006ca:	2140      	movs	r1, #64	; 0x40
 80006cc:	4802      	ldr	r0, [pc, #8]	; (80006d8 <Ba_1+0x50>)
 80006ce:	f001 fd76 	bl	80021be <HAL_GPIO_WritePin>
}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40010c00 	.word	0x40010c00

080006dc <Bon_1>:

void Bon_1(void) {
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_SET);
 80006e0:	2201      	movs	r2, #1
 80006e2:	2101      	movs	r1, #1
 80006e4:	4811      	ldr	r0, [pc, #68]	; (800072c <Bon_1+0x50>)
 80006e6:	f001 fd6a 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_RESET);
 80006ea:	2200      	movs	r2, #0
 80006ec:	2102      	movs	r1, #2
 80006ee:	480f      	ldr	r0, [pc, #60]	; (800072c <Bon_1+0x50>)
 80006f0:	f001 fd65 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_RESET);
 80006f4:	2200      	movs	r2, #0
 80006f6:	2104      	movs	r1, #4
 80006f8:	480c      	ldr	r0, [pc, #48]	; (800072c <Bon_1+0x50>)
 80006fa:	f001 fd60 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_SET);
 80006fe:	2201      	movs	r2, #1
 8000700:	2108      	movs	r1, #8
 8000702:	480a      	ldr	r0, [pc, #40]	; (800072c <Bon_1+0x50>)
 8000704:	f001 fd5b 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, GPIO_PIN_SET);
 8000708:	2201      	movs	r2, #1
 800070a:	2110      	movs	r1, #16
 800070c:	4807      	ldr	r0, [pc, #28]	; (800072c <Bon_1+0x50>)
 800070e:	f001 fd56 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_RESET);
 8000712:	2200      	movs	r2, #0
 8000714:	2120      	movs	r1, #32
 8000716:	4805      	ldr	r0, [pc, #20]	; (800072c <Bon_1+0x50>)
 8000718:	f001 fd51 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_RESET);
 800071c:	2200      	movs	r2, #0
 800071e:	2140      	movs	r1, #64	; 0x40
 8000720:	4802      	ldr	r0, [pc, #8]	; (800072c <Bon_1+0x50>)
 8000722:	f001 fd4c 	bl	80021be <HAL_GPIO_WritePin>
}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	40010c00 	.word	0x40010c00

08000730 <Nam_1>:

void Nam_1(void) {
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_RESET);
 8000734:	2200      	movs	r2, #0
 8000736:	2101      	movs	r1, #1
 8000738:	4811      	ldr	r0, [pc, #68]	; (8000780 <Nam_1+0x50>)
 800073a:	f001 fd40 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_SET);
 800073e:	2201      	movs	r2, #1
 8000740:	2102      	movs	r1, #2
 8000742:	480f      	ldr	r0, [pc, #60]	; (8000780 <Nam_1+0x50>)
 8000744:	f001 fd3b 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_RESET);
 8000748:	2200      	movs	r2, #0
 800074a:	2104      	movs	r1, #4
 800074c:	480c      	ldr	r0, [pc, #48]	; (8000780 <Nam_1+0x50>)
 800074e:	f001 fd36 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_RESET);
 8000752:	2200      	movs	r2, #0
 8000754:	2108      	movs	r1, #8
 8000756:	480a      	ldr	r0, [pc, #40]	; (8000780 <Nam_1+0x50>)
 8000758:	f001 fd31 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, GPIO_PIN_SET);
 800075c:	2201      	movs	r2, #1
 800075e:	2110      	movs	r1, #16
 8000760:	4807      	ldr	r0, [pc, #28]	; (8000780 <Nam_1+0x50>)
 8000762:	f001 fd2c 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_RESET);
 8000766:	2200      	movs	r2, #0
 8000768:	2120      	movs	r1, #32
 800076a:	4805      	ldr	r0, [pc, #20]	; (8000780 <Nam_1+0x50>)
 800076c:	f001 fd27 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_RESET);
 8000770:	2200      	movs	r2, #0
 8000772:	2140      	movs	r1, #64	; 0x40
 8000774:	4802      	ldr	r0, [pc, #8]	; (8000780 <Nam_1+0x50>)
 8000776:	f001 fd22 	bl	80021be <HAL_GPIO_WritePin>
}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40010c00 	.word	0x40010c00

08000784 <Sau_1>:

void Sau_1(void) {
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_RESET);
 8000788:	2200      	movs	r2, #0
 800078a:	2101      	movs	r1, #1
 800078c:	4811      	ldr	r0, [pc, #68]	; (80007d4 <Sau_1+0x50>)
 800078e:	f001 fd16 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_SET);
 8000792:	2201      	movs	r2, #1
 8000794:	2102      	movs	r1, #2
 8000796:	480f      	ldr	r0, [pc, #60]	; (80007d4 <Sau_1+0x50>)
 8000798:	f001 fd11 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_RESET);
 800079c:	2200      	movs	r2, #0
 800079e:	2104      	movs	r1, #4
 80007a0:	480c      	ldr	r0, [pc, #48]	; (80007d4 <Sau_1+0x50>)
 80007a2:	f001 fd0c 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_RESET);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2108      	movs	r1, #8
 80007aa:	480a      	ldr	r0, [pc, #40]	; (80007d4 <Sau_1+0x50>)
 80007ac:	f001 fd07 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, GPIO_PIN_RESET);
 80007b0:	2200      	movs	r2, #0
 80007b2:	2110      	movs	r1, #16
 80007b4:	4807      	ldr	r0, [pc, #28]	; (80007d4 <Sau_1+0x50>)
 80007b6:	f001 fd02 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_RESET);
 80007ba:	2200      	movs	r2, #0
 80007bc:	2120      	movs	r1, #32
 80007be:	4805      	ldr	r0, [pc, #20]	; (80007d4 <Sau_1+0x50>)
 80007c0:	f001 fcfd 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_RESET);
 80007c4:	2200      	movs	r2, #0
 80007c6:	2140      	movs	r1, #64	; 0x40
 80007c8:	4802      	ldr	r0, [pc, #8]	; (80007d4 <Sau_1+0x50>)
 80007ca:	f001 fcf8 	bl	80021be <HAL_GPIO_WritePin>
}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40010c00 	.word	0x40010c00

080007d8 <Bay_1>:

void Bay_1(void) {
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_RESET);
 80007dc:	2200      	movs	r2, #0
 80007de:	2101      	movs	r1, #1
 80007e0:	4811      	ldr	r0, [pc, #68]	; (8000828 <Bay_1+0x50>)
 80007e2:	f001 fcec 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_RESET);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2102      	movs	r1, #2
 80007ea:	480f      	ldr	r0, [pc, #60]	; (8000828 <Bay_1+0x50>)
 80007ec:	f001 fce7 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_RESET);
 80007f0:	2200      	movs	r2, #0
 80007f2:	2104      	movs	r1, #4
 80007f4:	480c      	ldr	r0, [pc, #48]	; (8000828 <Bay_1+0x50>)
 80007f6:	f001 fce2 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_SET);
 80007fa:	2201      	movs	r2, #1
 80007fc:	2108      	movs	r1, #8
 80007fe:	480a      	ldr	r0, [pc, #40]	; (8000828 <Bay_1+0x50>)
 8000800:	f001 fcdd 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, GPIO_PIN_SET);
 8000804:	2201      	movs	r2, #1
 8000806:	2110      	movs	r1, #16
 8000808:	4807      	ldr	r0, [pc, #28]	; (8000828 <Bay_1+0x50>)
 800080a:	f001 fcd8 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_SET);
 800080e:	2201      	movs	r2, #1
 8000810:	2120      	movs	r1, #32
 8000812:	4805      	ldr	r0, [pc, #20]	; (8000828 <Bay_1+0x50>)
 8000814:	f001 fcd3 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_SET);
 8000818:	2201      	movs	r2, #1
 800081a:	2140      	movs	r1, #64	; 0x40
 800081c:	4802      	ldr	r0, [pc, #8]	; (8000828 <Bay_1+0x50>)
 800081e:	f001 fcce 	bl	80021be <HAL_GPIO_WritePin>
}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40010c00 	.word	0x40010c00

0800082c <Tam_1>:

void Tam_1(void) {
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_RESET);
 8000830:	2200      	movs	r2, #0
 8000832:	2101      	movs	r1, #1
 8000834:	4811      	ldr	r0, [pc, #68]	; (800087c <Tam_1+0x50>)
 8000836:	f001 fcc2 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_RESET);
 800083a:	2200      	movs	r2, #0
 800083c:	2102      	movs	r1, #2
 800083e:	480f      	ldr	r0, [pc, #60]	; (800087c <Tam_1+0x50>)
 8000840:	f001 fcbd 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_RESET);
 8000844:	2200      	movs	r2, #0
 8000846:	2104      	movs	r1, #4
 8000848:	480c      	ldr	r0, [pc, #48]	; (800087c <Tam_1+0x50>)
 800084a:	f001 fcb8 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_RESET);
 800084e:	2200      	movs	r2, #0
 8000850:	2108      	movs	r1, #8
 8000852:	480a      	ldr	r0, [pc, #40]	; (800087c <Tam_1+0x50>)
 8000854:	f001 fcb3 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, GPIO_PIN_RESET);
 8000858:	2200      	movs	r2, #0
 800085a:	2110      	movs	r1, #16
 800085c:	4807      	ldr	r0, [pc, #28]	; (800087c <Tam_1+0x50>)
 800085e:	f001 fcae 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	2120      	movs	r1, #32
 8000866:	4805      	ldr	r0, [pc, #20]	; (800087c <Tam_1+0x50>)
 8000868:	f001 fca9 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_RESET);
 800086c:	2200      	movs	r2, #0
 800086e:	2140      	movs	r1, #64	; 0x40
 8000870:	4802      	ldr	r0, [pc, #8]	; (800087c <Tam_1+0x50>)
 8000872:	f001 fca4 	bl	80021be <HAL_GPIO_WritePin>
}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40010c00 	.word	0x40010c00

08000880 <Chin_1>:

void Chin_1(void) {
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_RESET);
 8000884:	2200      	movs	r2, #0
 8000886:	2101      	movs	r1, #1
 8000888:	4811      	ldr	r0, [pc, #68]	; (80008d0 <Chin_1+0x50>)
 800088a:	f001 fc98 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_RESET);
 800088e:	2200      	movs	r2, #0
 8000890:	2102      	movs	r1, #2
 8000892:	480f      	ldr	r0, [pc, #60]	; (80008d0 <Chin_1+0x50>)
 8000894:	f001 fc93 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_RESET);
 8000898:	2200      	movs	r2, #0
 800089a:	2104      	movs	r1, #4
 800089c:	480c      	ldr	r0, [pc, #48]	; (80008d0 <Chin_1+0x50>)
 800089e:	f001 fc8e 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_RESET);
 80008a2:	2200      	movs	r2, #0
 80008a4:	2108      	movs	r1, #8
 80008a6:	480a      	ldr	r0, [pc, #40]	; (80008d0 <Chin_1+0x50>)
 80008a8:	f001 fc89 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, GPIO_PIN_SET);
 80008ac:	2201      	movs	r2, #1
 80008ae:	2110      	movs	r1, #16
 80008b0:	4807      	ldr	r0, [pc, #28]	; (80008d0 <Chin_1+0x50>)
 80008b2:	f001 fc84 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_RESET);
 80008b6:	2200      	movs	r2, #0
 80008b8:	2120      	movs	r1, #32
 80008ba:	4805      	ldr	r0, [pc, #20]	; (80008d0 <Chin_1+0x50>)
 80008bc:	f001 fc7f 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_RESET);
 80008c0:	2200      	movs	r2, #0
 80008c2:	2140      	movs	r1, #64	; 0x40
 80008c4:	4802      	ldr	r0, [pc, #8]	; (80008d0 <Chin_1+0x50>)
 80008c6:	f001 fc7a 	bl	80021be <HAL_GPIO_WritePin>
}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40010c00 	.word	0x40010c00

080008d4 <display7SEG_1>:

void display7SEG_1(int num) {
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	2b09      	cmp	r3, #9
 80008e0:	d834      	bhi.n	800094c <display7SEG_1+0x78>
 80008e2:	a201      	add	r2, pc, #4	; (adr r2, 80008e8 <display7SEG_1+0x14>)
 80008e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008e8:	08000911 	.word	0x08000911
 80008ec:	08000917 	.word	0x08000917
 80008f0:	0800091d 	.word	0x0800091d
 80008f4:	08000923 	.word	0x08000923
 80008f8:	08000929 	.word	0x08000929
 80008fc:	0800092f 	.word	0x0800092f
 8000900:	08000935 	.word	0x08000935
 8000904:	0800093b 	.word	0x0800093b
 8000908:	08000941 	.word	0x08000941
 800090c:	08000947 	.word	0x08000947
    switch(num) {
        case 0: Khong_1(); break;
 8000910:	f7ff fe3c 	bl	800058c <Khong_1>
 8000914:	e01a      	b.n	800094c <display7SEG_1+0x78>
        case 1: Mot_1(); break;
 8000916:	f7ff fe63 	bl	80005e0 <Mot_1>
 800091a:	e017      	b.n	800094c <display7SEG_1+0x78>
        case 2: Hai_1(); break;
 800091c:	f7ff fe8a 	bl	8000634 <Hai_1>
 8000920:	e014      	b.n	800094c <display7SEG_1+0x78>
        case 3: Ba_1(); break;
 8000922:	f7ff feb1 	bl	8000688 <Ba_1>
 8000926:	e011      	b.n	800094c <display7SEG_1+0x78>
        case 4: Bon_1(); break;
 8000928:	f7ff fed8 	bl	80006dc <Bon_1>
 800092c:	e00e      	b.n	800094c <display7SEG_1+0x78>
        case 5: Nam_1(); break;
 800092e:	f7ff feff 	bl	8000730 <Nam_1>
 8000932:	e00b      	b.n	800094c <display7SEG_1+0x78>
        case 6: Sau_1(); break;
 8000934:	f7ff ff26 	bl	8000784 <Sau_1>
 8000938:	e008      	b.n	800094c <display7SEG_1+0x78>
        case 7: Bay_1(); break;
 800093a:	f7ff ff4d 	bl	80007d8 <Bay_1>
 800093e:	e005      	b.n	800094c <display7SEG_1+0x78>
        case 8: Tam_1(); break;
 8000940:	f7ff ff74 	bl	800082c <Tam_1>
 8000944:	e002      	b.n	800094c <display7SEG_1+0x78>
        case 9: Chin_1(); break;
 8000946:	f7ff ff9b 	bl	8000880 <Chin_1>
 800094a:	bf00      	nop
    }
}
 800094c:	bf00      	nop
 800094e:	3708      	adds	r7, #8
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}

08000954 <subKeyProcess>:
int KeyReg2[ARRAY_SIZE] = {NORMAL_STATE, NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};

int KeyReg3[ARRAY_SIZE] = {NORMAL_STATE, NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};
int TimerForKeyPress[ARRAY_SIZE] = {2000, 2000, 2000, 2000};

void subKeyProcess(int i){
 8000954:	b480      	push	{r7}
 8000956:	b085      	sub	sp, #20
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
	for(int j = 0; j < ARRAY_SIZE; j++){
 800095c:	2300      	movs	r3, #0
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	e007      	b.n	8000972 <subKeyProcess+0x1e>
		button_flag[j] = 0;
 8000962:	4a0a      	ldr	r2, [pc, #40]	; (800098c <subKeyProcess+0x38>)
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	2100      	movs	r1, #0
 8000968:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int j = 0; j < ARRAY_SIZE; j++){
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	3301      	adds	r3, #1
 8000970:	60fb      	str	r3, [r7, #12]
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	2b03      	cmp	r3, #3
 8000976:	ddf4      	ble.n	8000962 <subKeyProcess+0xe>
	}
	button_flag[i] = 1;
 8000978:	4a04      	ldr	r2, [pc, #16]	; (800098c <subKeyProcess+0x38>)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	2101      	movs	r1, #1
 800097e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000982:	bf00      	nop
 8000984:	3714      	adds	r7, #20
 8000986:	46bd      	mov	sp, r7
 8000988:	bc80      	pop	{r7}
 800098a:	4770      	bx	lr
 800098c:	200000c0 	.word	0x200000c0

08000990 <subKeyProcess0>:

void subKeyProcess0(){
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
	PRESSED_STATE_0 = 1;
 8000994:	4b03      	ldr	r3, [pc, #12]	; (80009a4 <subKeyProcess0+0x14>)
 8000996:	2201      	movs	r2, #1
 8000998:	601a      	str	r2, [r3, #0]
}
 800099a:	bf00      	nop
 800099c:	46bd      	mov	sp, r7
 800099e:	bc80      	pop	{r7}
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	200000d0 	.word	0x200000d0

080009a8 <getKeyInput>:

void getKeyInput(){
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
	KeyReg0[0] = KeyReg1[0];
 80009ae:	4b57      	ldr	r3, [pc, #348]	; (8000b0c <getKeyInput+0x164>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4a57      	ldr	r2, [pc, #348]	; (8000b10 <getKeyInput+0x168>)
 80009b4:	6013      	str	r3, [r2, #0]
	KeyReg1[0] = KeyReg2[0];
 80009b6:	4b57      	ldr	r3, [pc, #348]	; (8000b14 <getKeyInput+0x16c>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	4a54      	ldr	r2, [pc, #336]	; (8000b0c <getKeyInput+0x164>)
 80009bc:	6013      	str	r3, [r2, #0]
	KeyReg2[0] = HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 80009be:	2101      	movs	r1, #1
 80009c0:	4855      	ldr	r0, [pc, #340]	; (8000b18 <getKeyInput+0x170>)
 80009c2:	f001 fbe5 	bl	8002190 <HAL_GPIO_ReadPin>
 80009c6:	4603      	mov	r3, r0
 80009c8:	461a      	mov	r2, r3
 80009ca:	4b52      	ldr	r3, [pc, #328]	; (8000b14 <getKeyInput+0x16c>)
 80009cc:	601a      	str	r2, [r3, #0]

	KeyReg0[1] = KeyReg1[1];
 80009ce:	4b4f      	ldr	r3, [pc, #316]	; (8000b0c <getKeyInput+0x164>)
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	4a4f      	ldr	r2, [pc, #316]	; (8000b10 <getKeyInput+0x168>)
 80009d4:	6053      	str	r3, [r2, #4]
	KeyReg1[1] = KeyReg2[1];
 80009d6:	4b4f      	ldr	r3, [pc, #316]	; (8000b14 <getKeyInput+0x16c>)
 80009d8:	685b      	ldr	r3, [r3, #4]
 80009da:	4a4c      	ldr	r2, [pc, #304]	; (8000b0c <getKeyInput+0x164>)
 80009dc:	6053      	str	r3, [r2, #4]
	KeyReg2[1] = HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);
 80009de:	2102      	movs	r1, #2
 80009e0:	484d      	ldr	r0, [pc, #308]	; (8000b18 <getKeyInput+0x170>)
 80009e2:	f001 fbd5 	bl	8002190 <HAL_GPIO_ReadPin>
 80009e6:	4603      	mov	r3, r0
 80009e8:	461a      	mov	r2, r3
 80009ea:	4b4a      	ldr	r3, [pc, #296]	; (8000b14 <getKeyInput+0x16c>)
 80009ec:	605a      	str	r2, [r3, #4]

	KeyReg0[2] = KeyReg1[2];
 80009ee:	4b47      	ldr	r3, [pc, #284]	; (8000b0c <getKeyInput+0x164>)
 80009f0:	689b      	ldr	r3, [r3, #8]
 80009f2:	4a47      	ldr	r2, [pc, #284]	; (8000b10 <getKeyInput+0x168>)
 80009f4:	6093      	str	r3, [r2, #8]
	KeyReg1[2] = KeyReg2[2];
 80009f6:	4b47      	ldr	r3, [pc, #284]	; (8000b14 <getKeyInput+0x16c>)
 80009f8:	689b      	ldr	r3, [r3, #8]
 80009fa:	4a44      	ldr	r2, [pc, #272]	; (8000b0c <getKeyInput+0x164>)
 80009fc:	6093      	str	r3, [r2, #8]
	KeyReg2[2] = HAL_GPIO_ReadPin(Button3_GPIO_Port, Button3_Pin);
 80009fe:	2104      	movs	r1, #4
 8000a00:	4845      	ldr	r0, [pc, #276]	; (8000b18 <getKeyInput+0x170>)
 8000a02:	f001 fbc5 	bl	8002190 <HAL_GPIO_ReadPin>
 8000a06:	4603      	mov	r3, r0
 8000a08:	461a      	mov	r2, r3
 8000a0a:	4b42      	ldr	r3, [pc, #264]	; (8000b14 <getKeyInput+0x16c>)
 8000a0c:	609a      	str	r2, [r3, #8]

	KeyReg0[3] = KeyReg1[3];
 8000a0e:	4b3f      	ldr	r3, [pc, #252]	; (8000b0c <getKeyInput+0x164>)
 8000a10:	68db      	ldr	r3, [r3, #12]
 8000a12:	4a3f      	ldr	r2, [pc, #252]	; (8000b10 <getKeyInput+0x168>)
 8000a14:	60d3      	str	r3, [r2, #12]
	KeyReg1[3] = KeyReg2[3];
 8000a16:	4b3f      	ldr	r3, [pc, #252]	; (8000b14 <getKeyInput+0x16c>)
 8000a18:	68db      	ldr	r3, [r3, #12]
 8000a1a:	4a3c      	ldr	r2, [pc, #240]	; (8000b0c <getKeyInput+0x164>)
 8000a1c:	60d3      	str	r3, [r2, #12]
	KeyReg2[3] = HAL_GPIO_ReadPin(Button4_GPIO_Port, Button4_Pin);
 8000a1e:	2108      	movs	r1, #8
 8000a20:	483d      	ldr	r0, [pc, #244]	; (8000b18 <getKeyInput+0x170>)
 8000a22:	f001 fbb5 	bl	8002190 <HAL_GPIO_ReadPin>
 8000a26:	4603      	mov	r3, r0
 8000a28:	461a      	mov	r2, r3
 8000a2a:	4b3a      	ldr	r3, [pc, #232]	; (8000b14 <getKeyInput+0x16c>)
 8000a2c:	60da      	str	r2, [r3, #12]

	for(int i = 0; i < ARRAY_SIZE; i++){
 8000a2e:	2300      	movs	r3, #0
 8000a30:	607b      	str	r3, [r7, #4]
 8000a32:	e063      	b.n	8000afc <getKeyInput+0x154>
		if((KeyReg0[i] == KeyReg1[i]) && (KeyReg1[i] == KeyReg2[i])){
 8000a34:	4a36      	ldr	r2, [pc, #216]	; (8000b10 <getKeyInput+0x168>)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a3c:	4933      	ldr	r1, [pc, #204]	; (8000b0c <getKeyInput+0x164>)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a44:	429a      	cmp	r2, r3
 8000a46:	d156      	bne.n	8000af6 <getKeyInput+0x14e>
 8000a48:	4a30      	ldr	r2, [pc, #192]	; (8000b0c <getKeyInput+0x164>)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a50:	4930      	ldr	r1, [pc, #192]	; (8000b14 <getKeyInput+0x16c>)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a58:	429a      	cmp	r2, r3
 8000a5a:	d14c      	bne.n	8000af6 <getKeyInput+0x14e>
			if(KeyReg3[i] != KeyReg2[i]){
 8000a5c:	4a2f      	ldr	r2, [pc, #188]	; (8000b1c <getKeyInput+0x174>)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a64:	492b      	ldr	r1, [pc, #172]	; (8000b14 <getKeyInput+0x16c>)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	d017      	beq.n	8000aa0 <getKeyInput+0xf8>
				KeyReg3[i] = KeyReg2[i];
 8000a70:	4a28      	ldr	r2, [pc, #160]	; (8000b14 <getKeyInput+0x16c>)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a78:	4928      	ldr	r1, [pc, #160]	; (8000b1c <getKeyInput+0x174>)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(KeyReg2[i] == PRESSED_STATE){
 8000a80:	4a24      	ldr	r2, [pc, #144]	; (8000b14 <getKeyInput+0x16c>)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d134      	bne.n	8000af6 <getKeyInput+0x14e>
					subKeyProcess(i);
 8000a8c:	6878      	ldr	r0, [r7, #4]
 8000a8e:	f7ff ff61 	bl	8000954 <subKeyProcess>
					TimerForKeyPress[i] = 2000;
 8000a92:	4a23      	ldr	r2, [pc, #140]	; (8000b20 <getKeyInput+0x178>)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000a9a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000a9e:	e02a      	b.n	8000af6 <getKeyInput+0x14e>
				}
			}else{
				TimerForKeyPress[i]--;
 8000aa0:	4a1f      	ldr	r2, [pc, #124]	; (8000b20 <getKeyInput+0x178>)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aa8:	1e5a      	subs	r2, r3, #1
 8000aaa:	491d      	ldr	r1, [pc, #116]	; (8000b20 <getKeyInput+0x178>)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(TimerForKeyPress[i] == 0){
 8000ab2:	4a1b      	ldr	r2, [pc, #108]	; (8000b20 <getKeyInput+0x178>)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d11b      	bne.n	8000af6 <getKeyInput+0x14e>
					if(i == 0 && KeyReg2[0] == PRESSED_STATE){
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d106      	bne.n	8000ad2 <getKeyInput+0x12a>
 8000ac4:	4b13      	ldr	r3, [pc, #76]	; (8000b14 <getKeyInput+0x16c>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d102      	bne.n	8000ad2 <getKeyInput+0x12a>
						subKeyProcess0();
 8000acc:	f7ff ff60 	bl	8000990 <subKeyProcess0>
 8000ad0:	e00b      	b.n	8000aea <getKeyInput+0x142>
					}
					else if(i != 0 && KeyReg2[i] == PRESSED_STATE){
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d008      	beq.n	8000aea <getKeyInput+0x142>
 8000ad8:	4a0e      	ldr	r2, [pc, #56]	; (8000b14 <getKeyInput+0x16c>)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d102      	bne.n	8000aea <getKeyInput+0x142>
						subKeyProcess(i);
 8000ae4:	6878      	ldr	r0, [r7, #4]
 8000ae6:	f7ff ff35 	bl	8000954 <subKeyProcess>
					}
					TimerForKeyPress[i] = 2000;
 8000aea:	4a0d      	ldr	r2, [pc, #52]	; (8000b20 <getKeyInput+0x178>)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000af2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < ARRAY_SIZE; i++){
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	3301      	adds	r3, #1
 8000afa:	607b      	str	r3, [r7, #4]
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	2b03      	cmp	r3, #3
 8000b00:	dd98      	ble.n	8000a34 <getKeyInput+0x8c>
				}
			}
		}
	}
}
 8000b02:	bf00      	nop
 8000b04:	bf00      	nop
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	20000010 	.word	0x20000010
 8000b10:	20000000 	.word	0x20000000
 8000b14:	20000020 	.word	0x20000020
 8000b18:	40010800 	.word	0x40010800
 8000b1c:	20000030 	.word	0x20000030
 8000b20:	20000040 	.word	0x20000040

08000b24 <Reset>:
 */

#include "fsm_automatic.h"
#include "global.h"

void Reset(){
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
	en0 = 1; en1 = 0; en2 = 1; en3 = 0;
 8000b28:	4b1e      	ldr	r3, [pc, #120]	; (8000ba4 <Reset+0x80>)
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	601a      	str	r2, [r3, #0]
 8000b2e:	4b1e      	ldr	r3, [pc, #120]	; (8000ba8 <Reset+0x84>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	4b1d      	ldr	r3, [pc, #116]	; (8000bac <Reset+0x88>)
 8000b36:	2201      	movs	r2, #1
 8000b38:	601a      	str	r2, [r3, #0]
 8000b3a:	4b1d      	ldr	r3, [pc, #116]	; (8000bb0 <Reset+0x8c>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
	i_1 = max_Red;
 8000b40:	4b1c      	ldr	r3, [pc, #112]	; (8000bb4 <Reset+0x90>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a1c      	ldr	r2, [pc, #112]	; (8000bb8 <Reset+0x94>)
 8000b46:	6013      	str	r3, [r2, #0]
	j_1 = max_Yellow;
 8000b48:	4b1c      	ldr	r3, [pc, #112]	; (8000bbc <Reset+0x98>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a1c      	ldr	r2, [pc, #112]	; (8000bc0 <Reset+0x9c>)
 8000b4e:	6013      	str	r3, [r2, #0]
	t_1 = max_Green;
 8000b50:	4b1c      	ldr	r3, [pc, #112]	; (8000bc4 <Reset+0xa0>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a1c      	ldr	r2, [pc, #112]	; (8000bc8 <Reset+0xa4>)
 8000b56:	6013      	str	r3, [r2, #0]
	i_2 = max_Red;
 8000b58:	4b16      	ldr	r3, [pc, #88]	; (8000bb4 <Reset+0x90>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a1b      	ldr	r2, [pc, #108]	; (8000bcc <Reset+0xa8>)
 8000b5e:	6013      	str	r3, [r2, #0]
	j_2 = max_Yellow;
 8000b60:	4b16      	ldr	r3, [pc, #88]	; (8000bbc <Reset+0x98>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a1a      	ldr	r2, [pc, #104]	; (8000bd0 <Reset+0xac>)
 8000b66:	6013      	str	r3, [r2, #0]
	t_2 = max_Green;
 8000b68:	4b16      	ldr	r3, [pc, #88]	; (8000bc4 <Reset+0xa0>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a19      	ldr	r2, [pc, #100]	; (8000bd4 <Reset+0xb0>)
 8000b6e:	6013      	str	r3, [r2, #0]
	test = 1; r = 1; dem = 2;
 8000b70:	4b19      	ldr	r3, [pc, #100]	; (8000bd8 <Reset+0xb4>)
 8000b72:	2201      	movs	r2, #1
 8000b74:	601a      	str	r2, [r3, #0]
 8000b76:	4b19      	ldr	r3, [pc, #100]	; (8000bdc <Reset+0xb8>)
 8000b78:	2201      	movs	r2, #1
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	4b18      	ldr	r3, [pc, #96]	; (8000be0 <Reset+0xbc>)
 8000b7e:	2202      	movs	r2, #2
 8000b80:	601a      	str	r2, [r3, #0]
	turn = 0;
 8000b82:	4b18      	ldr	r3, [pc, #96]	; (8000be4 <Reset+0xc0>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
	counter = 0, counter2 = 1;
 8000b88:	4b17      	ldr	r3, [pc, #92]	; (8000be8 <Reset+0xc4>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	601a      	str	r2, [r3, #0]
 8000b8e:	4b17      	ldr	r3, [pc, #92]	; (8000bec <Reset+0xc8>)
 8000b90:	2201      	movs	r2, #1
 8000b92:	601a      	str	r2, [r3, #0]
	bool = 0;
 8000b94:	4b16      	ldr	r3, [pc, #88]	; (8000bf0 <Reset+0xcc>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
}
 8000b9a:	bf00      	nop
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bc80      	pop	{r7}
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	20000050 	.word	0x20000050
 8000ba8:	200000dc 	.word	0x200000dc
 8000bac:	20000054 	.word	0x20000054
 8000bb0:	200000e0 	.word	0x200000e0
 8000bb4:	20000080 	.word	0x20000080
 8000bb8:	2000005c 	.word	0x2000005c
 8000bbc:	20000084 	.word	0x20000084
 8000bc0:	20000060 	.word	0x20000060
 8000bc4:	20000088 	.word	0x20000088
 8000bc8:	20000064 	.word	0x20000064
 8000bcc:	20000068 	.word	0x20000068
 8000bd0:	2000006c 	.word	0x2000006c
 8000bd4:	20000070 	.word	0x20000070
 8000bd8:	20000074 	.word	0x20000074
 8000bdc:	20000078 	.word	0x20000078
 8000be0:	2000007c 	.word	0x2000007c
 8000be4:	200000f0 	.word	0x200000f0
 8000be8:	200000ec 	.word	0x200000ec
 8000bec:	20000058 	.word	0x20000058
 8000bf0:	200000e4 	.word	0x200000e4

08000bf4 <case1>:
void case1() {
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
	switch(counter){
 8000bf8:	4ba5      	ldr	r3, [pc, #660]	; (8000e90 <case1+0x29c>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	2b02      	cmp	r3, #2
 8000bfe:	d079      	beq.n	8000cf4 <case1+0x100>
 8000c00:	2b02      	cmp	r3, #2
 8000c02:	f300 80b3 	bgt.w	8000d6c <case1+0x178>
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d002      	beq.n	8000c10 <case1+0x1c>
 8000c0a:	2b01      	cmp	r3, #1
 8000c0c:	d039      	beq.n	8000c82 <case1+0x8e>
 8000c0e:	e0ad      	b.n	8000d6c <case1+0x178>
	case 0:
		LED_RED_3();
 8000c10:	f000 fbb4 	bl	800137c <LED_RED_3>
		if (r == 1) {
 8000c14:	4b9f      	ldr	r3, [pc, #636]	; (8000e94 <case1+0x2a0>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d10b      	bne.n	8000c34 <case1+0x40>
			display7SEG(i_1 / 10);
 8000c1c:	4b9e      	ldr	r3, [pc, #632]	; (8000e98 <case1+0x2a4>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a9e      	ldr	r2, [pc, #632]	; (8000e9c <case1+0x2a8>)
 8000c22:	fb82 1203 	smull	r1, r2, r2, r3
 8000c26:	1092      	asrs	r2, r2, #2
 8000c28:	17db      	asrs	r3, r3, #31
 8000c2a:	1ad3      	subs	r3, r2, r3
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff fc6d 	bl	800050c <display7SEG>
 8000c32:	e00f      	b.n	8000c54 <case1+0x60>
		} else {
			display7SEG(i_1 % 10);
 8000c34:	4b98      	ldr	r3, [pc, #608]	; (8000e98 <case1+0x2a4>)
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	4b98      	ldr	r3, [pc, #608]	; (8000e9c <case1+0x2a8>)
 8000c3a:	fb83 1302 	smull	r1, r3, r3, r2
 8000c3e:	1099      	asrs	r1, r3, #2
 8000c40:	17d3      	asrs	r3, r2, #31
 8000c42:	1ac9      	subs	r1, r1, r3
 8000c44:	460b      	mov	r3, r1
 8000c46:	009b      	lsls	r3, r3, #2
 8000c48:	440b      	add	r3, r1
 8000c4a:	005b      	lsls	r3, r3, #1
 8000c4c:	1ad1      	subs	r1, r2, r3
 8000c4e:	4608      	mov	r0, r1
 8000c50:	f7ff fc5c 	bl	800050c <display7SEG>
		}
		if(dem == 0){
 8000c54:	4b92      	ldr	r3, [pc, #584]	; (8000ea0 <case1+0x2ac>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d104      	bne.n	8000c66 <case1+0x72>
			i_1--;
 8000c5c:	4b8e      	ldr	r3, [pc, #568]	; (8000e98 <case1+0x2a4>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	3b01      	subs	r3, #1
 8000c62:	4a8d      	ldr	r2, [pc, #564]	; (8000e98 <case1+0x2a4>)
 8000c64:	6013      	str	r3, [r2, #0]
		}
		if(i_1 == 0) {
 8000c66:	4b8c      	ldr	r3, [pc, #560]	; (8000e98 <case1+0x2a4>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d179      	bne.n	8000d62 <case1+0x16e>
			i_1 = max_Red;
 8000c6e:	4b8d      	ldr	r3, [pc, #564]	; (8000ea4 <case1+0x2b0>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4a89      	ldr	r2, [pc, #548]	; (8000e98 <case1+0x2a4>)
 8000c74:	6013      	str	r3, [r2, #0]
			counter++;
 8000c76:	4b86      	ldr	r3, [pc, #536]	; (8000e90 <case1+0x29c>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	4a84      	ldr	r2, [pc, #528]	; (8000e90 <case1+0x29c>)
 8000c7e:	6013      	str	r3, [r2, #0]
		}
		break;
 8000c80:	e06f      	b.n	8000d62 <case1+0x16e>
	case 1:
		LED_GREEN_3();
 8000c82:	f000 fb8d 	bl	80013a0 <LED_GREEN_3>
		if (r == 1) {
 8000c86:	4b83      	ldr	r3, [pc, #524]	; (8000e94 <case1+0x2a0>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	2b01      	cmp	r3, #1
 8000c8c:	d10b      	bne.n	8000ca6 <case1+0xb2>
			display7SEG(t_1 / 10);
 8000c8e:	4b86      	ldr	r3, [pc, #536]	; (8000ea8 <case1+0x2b4>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4a82      	ldr	r2, [pc, #520]	; (8000e9c <case1+0x2a8>)
 8000c94:	fb82 1203 	smull	r1, r2, r2, r3
 8000c98:	1092      	asrs	r2, r2, #2
 8000c9a:	17db      	asrs	r3, r3, #31
 8000c9c:	1ad3      	subs	r3, r2, r3
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f7ff fc34 	bl	800050c <display7SEG>
 8000ca4:	e00f      	b.n	8000cc6 <case1+0xd2>
		} else {
			display7SEG(t_1 % 10);
 8000ca6:	4b80      	ldr	r3, [pc, #512]	; (8000ea8 <case1+0x2b4>)
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	4b7c      	ldr	r3, [pc, #496]	; (8000e9c <case1+0x2a8>)
 8000cac:	fb83 1302 	smull	r1, r3, r3, r2
 8000cb0:	1099      	asrs	r1, r3, #2
 8000cb2:	17d3      	asrs	r3, r2, #31
 8000cb4:	1ac9      	subs	r1, r1, r3
 8000cb6:	460b      	mov	r3, r1
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	440b      	add	r3, r1
 8000cbc:	005b      	lsls	r3, r3, #1
 8000cbe:	1ad1      	subs	r1, r2, r3
 8000cc0:	4608      	mov	r0, r1
 8000cc2:	f7ff fc23 	bl	800050c <display7SEG>
		}
		if(dem == 0){
 8000cc6:	4b76      	ldr	r3, [pc, #472]	; (8000ea0 <case1+0x2ac>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d104      	bne.n	8000cd8 <case1+0xe4>
			t_1--;
 8000cce:	4b76      	ldr	r3, [pc, #472]	; (8000ea8 <case1+0x2b4>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	3b01      	subs	r3, #1
 8000cd4:	4a74      	ldr	r2, [pc, #464]	; (8000ea8 <case1+0x2b4>)
 8000cd6:	6013      	str	r3, [r2, #0]
		}
		if(t_1 == 0) {
 8000cd8:	4b73      	ldr	r3, [pc, #460]	; (8000ea8 <case1+0x2b4>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d142      	bne.n	8000d66 <case1+0x172>
			t_1 = max_Green;
 8000ce0:	4b72      	ldr	r3, [pc, #456]	; (8000eac <case1+0x2b8>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a70      	ldr	r2, [pc, #448]	; (8000ea8 <case1+0x2b4>)
 8000ce6:	6013      	str	r3, [r2, #0]
			counter++;
 8000ce8:	4b69      	ldr	r3, [pc, #420]	; (8000e90 <case1+0x29c>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	3301      	adds	r3, #1
 8000cee:	4a68      	ldr	r2, [pc, #416]	; (8000e90 <case1+0x29c>)
 8000cf0:	6013      	str	r3, [r2, #0]
		}
		break;
 8000cf2:	e038      	b.n	8000d66 <case1+0x172>
	case 2:
		LED_YELLOW_3();
 8000cf4:	f000 fb66 	bl	80013c4 <LED_YELLOW_3>
		if (r == 1) {
 8000cf8:	4b66      	ldr	r3, [pc, #408]	; (8000e94 <case1+0x2a0>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d10b      	bne.n	8000d18 <case1+0x124>
			display7SEG(j_1 / 10);
 8000d00:	4b6b      	ldr	r3, [pc, #428]	; (8000eb0 <case1+0x2bc>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a65      	ldr	r2, [pc, #404]	; (8000e9c <case1+0x2a8>)
 8000d06:	fb82 1203 	smull	r1, r2, r2, r3
 8000d0a:	1092      	asrs	r2, r2, #2
 8000d0c:	17db      	asrs	r3, r3, #31
 8000d0e:	1ad3      	subs	r3, r2, r3
 8000d10:	4618      	mov	r0, r3
 8000d12:	f7ff fbfb 	bl	800050c <display7SEG>
 8000d16:	e00f      	b.n	8000d38 <case1+0x144>
		} else {
			display7SEG(j_1 % 10);
 8000d18:	4b65      	ldr	r3, [pc, #404]	; (8000eb0 <case1+0x2bc>)
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	4b5f      	ldr	r3, [pc, #380]	; (8000e9c <case1+0x2a8>)
 8000d1e:	fb83 1302 	smull	r1, r3, r3, r2
 8000d22:	1099      	asrs	r1, r3, #2
 8000d24:	17d3      	asrs	r3, r2, #31
 8000d26:	1ac9      	subs	r1, r1, r3
 8000d28:	460b      	mov	r3, r1
 8000d2a:	009b      	lsls	r3, r3, #2
 8000d2c:	440b      	add	r3, r1
 8000d2e:	005b      	lsls	r3, r3, #1
 8000d30:	1ad1      	subs	r1, r2, r3
 8000d32:	4608      	mov	r0, r1
 8000d34:	f7ff fbea 	bl	800050c <display7SEG>
		}
		if(dem == 0){
 8000d38:	4b59      	ldr	r3, [pc, #356]	; (8000ea0 <case1+0x2ac>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d104      	bne.n	8000d4a <case1+0x156>
			j_1--;
 8000d40:	4b5b      	ldr	r3, [pc, #364]	; (8000eb0 <case1+0x2bc>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	3b01      	subs	r3, #1
 8000d46:	4a5a      	ldr	r2, [pc, #360]	; (8000eb0 <case1+0x2bc>)
 8000d48:	6013      	str	r3, [r2, #0]
		}
		if(j_1 == 0) {
 8000d4a:	4b59      	ldr	r3, [pc, #356]	; (8000eb0 <case1+0x2bc>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d10b      	bne.n	8000d6a <case1+0x176>
			j_1 = max_Yellow;
 8000d52:	4b58      	ldr	r3, [pc, #352]	; (8000eb4 <case1+0x2c0>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a56      	ldr	r2, [pc, #344]	; (8000eb0 <case1+0x2bc>)
 8000d58:	6013      	str	r3, [r2, #0]
			counter = 0;
 8000d5a:	4b4d      	ldr	r3, [pc, #308]	; (8000e90 <case1+0x29c>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
		}
		break;
 8000d60:	e003      	b.n	8000d6a <case1+0x176>
		break;
 8000d62:	bf00      	nop
 8000d64:	e002      	b.n	8000d6c <case1+0x178>
		break;
 8000d66:	bf00      	nop
 8000d68:	e000      	b.n	8000d6c <case1+0x178>
		break;
 8000d6a:	bf00      	nop
	}

	switch(counter2){
 8000d6c:	4b52      	ldr	r3, [pc, #328]	; (8000eb8 <case1+0x2c4>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	2b02      	cmp	r3, #2
 8000d72:	d07a      	beq.n	8000e6a <case1+0x276>
 8000d74:	2b02      	cmp	r3, #2
 8000d76:	f300 80d1 	bgt.w	8000f1c <case1+0x328>
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d002      	beq.n	8000d84 <case1+0x190>
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	d03a      	beq.n	8000df8 <case1+0x204>
			j_2 = max_Yellow;
			counter2 = 0;
		}
		break;
	}
}
 8000d82:	e0cb      	b.n	8000f1c <case1+0x328>
		LED_RED_4();
 8000d84:	f000 fb30 	bl	80013e8 <LED_RED_4>
		if (r == 1) {
 8000d88:	4b42      	ldr	r3, [pc, #264]	; (8000e94 <case1+0x2a0>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	d10b      	bne.n	8000da8 <case1+0x1b4>
			display7SEG_1(i_2 / 10);
 8000d90:	4b4a      	ldr	r3, [pc, #296]	; (8000ebc <case1+0x2c8>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a41      	ldr	r2, [pc, #260]	; (8000e9c <case1+0x2a8>)
 8000d96:	fb82 1203 	smull	r1, r2, r2, r3
 8000d9a:	1092      	asrs	r2, r2, #2
 8000d9c:	17db      	asrs	r3, r3, #31
 8000d9e:	1ad3      	subs	r3, r2, r3
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff fd97 	bl	80008d4 <display7SEG_1>
 8000da6:	e00f      	b.n	8000dc8 <case1+0x1d4>
			display7SEG_1(i_2 % 10);
 8000da8:	4b44      	ldr	r3, [pc, #272]	; (8000ebc <case1+0x2c8>)
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	4b3b      	ldr	r3, [pc, #236]	; (8000e9c <case1+0x2a8>)
 8000dae:	fb83 1302 	smull	r1, r3, r3, r2
 8000db2:	1099      	asrs	r1, r3, #2
 8000db4:	17d3      	asrs	r3, r2, #31
 8000db6:	1ac9      	subs	r1, r1, r3
 8000db8:	460b      	mov	r3, r1
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	440b      	add	r3, r1
 8000dbe:	005b      	lsls	r3, r3, #1
 8000dc0:	1ad1      	subs	r1, r2, r3
 8000dc2:	4608      	mov	r0, r1
 8000dc4:	f7ff fd86 	bl	80008d4 <display7SEG_1>
		if(dem == 0){
 8000dc8:	4b35      	ldr	r3, [pc, #212]	; (8000ea0 <case1+0x2ac>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d104      	bne.n	8000dda <case1+0x1e6>
			i_2--;
 8000dd0:	4b3a      	ldr	r3, [pc, #232]	; (8000ebc <case1+0x2c8>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	3b01      	subs	r3, #1
 8000dd6:	4a39      	ldr	r2, [pc, #228]	; (8000ebc <case1+0x2c8>)
 8000dd8:	6013      	str	r3, [r2, #0]
		if(i_2 == 0) {
 8000dda:	4b38      	ldr	r3, [pc, #224]	; (8000ebc <case1+0x2c8>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	f040 8097 	bne.w	8000f12 <case1+0x31e>
			i_2 = max_Red;
 8000de4:	4b2f      	ldr	r3, [pc, #188]	; (8000ea4 <case1+0x2b0>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a34      	ldr	r2, [pc, #208]	; (8000ebc <case1+0x2c8>)
 8000dea:	6013      	str	r3, [r2, #0]
			counter2++;
 8000dec:	4b32      	ldr	r3, [pc, #200]	; (8000eb8 <case1+0x2c4>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	3301      	adds	r3, #1
 8000df2:	4a31      	ldr	r2, [pc, #196]	; (8000eb8 <case1+0x2c4>)
 8000df4:	6013      	str	r3, [r2, #0]
		break;
 8000df6:	e08c      	b.n	8000f12 <case1+0x31e>
		LED_GREEN_4();
 8000df8:	f000 fb08 	bl	800140c <LED_GREEN_4>
		if (r == 1) {
 8000dfc:	4b25      	ldr	r3, [pc, #148]	; (8000e94 <case1+0x2a0>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d10b      	bne.n	8000e1c <case1+0x228>
			display7SEG_1(t_2 / 10);
 8000e04:	4b2e      	ldr	r3, [pc, #184]	; (8000ec0 <case1+0x2cc>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a24      	ldr	r2, [pc, #144]	; (8000e9c <case1+0x2a8>)
 8000e0a:	fb82 1203 	smull	r1, r2, r2, r3
 8000e0e:	1092      	asrs	r2, r2, #2
 8000e10:	17db      	asrs	r3, r3, #31
 8000e12:	1ad3      	subs	r3, r2, r3
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff fd5d 	bl	80008d4 <display7SEG_1>
 8000e1a:	e00f      	b.n	8000e3c <case1+0x248>
			display7SEG_1(t_2 % 10);
 8000e1c:	4b28      	ldr	r3, [pc, #160]	; (8000ec0 <case1+0x2cc>)
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	4b1e      	ldr	r3, [pc, #120]	; (8000e9c <case1+0x2a8>)
 8000e22:	fb83 1302 	smull	r1, r3, r3, r2
 8000e26:	1099      	asrs	r1, r3, #2
 8000e28:	17d3      	asrs	r3, r2, #31
 8000e2a:	1ac9      	subs	r1, r1, r3
 8000e2c:	460b      	mov	r3, r1
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	440b      	add	r3, r1
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	1ad1      	subs	r1, r2, r3
 8000e36:	4608      	mov	r0, r1
 8000e38:	f7ff fd4c 	bl	80008d4 <display7SEG_1>
		if(dem == 0){
 8000e3c:	4b18      	ldr	r3, [pc, #96]	; (8000ea0 <case1+0x2ac>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d104      	bne.n	8000e4e <case1+0x25a>
			t_2--;
 8000e44:	4b1e      	ldr	r3, [pc, #120]	; (8000ec0 <case1+0x2cc>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	3b01      	subs	r3, #1
 8000e4a:	4a1d      	ldr	r2, [pc, #116]	; (8000ec0 <case1+0x2cc>)
 8000e4c:	6013      	str	r3, [r2, #0]
		if(t_2 == 0) {
 8000e4e:	4b1c      	ldr	r3, [pc, #112]	; (8000ec0 <case1+0x2cc>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d15f      	bne.n	8000f16 <case1+0x322>
			t_2 = max_Green;
 8000e56:	4b15      	ldr	r3, [pc, #84]	; (8000eac <case1+0x2b8>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a19      	ldr	r2, [pc, #100]	; (8000ec0 <case1+0x2cc>)
 8000e5c:	6013      	str	r3, [r2, #0]
			counter2++;
 8000e5e:	4b16      	ldr	r3, [pc, #88]	; (8000eb8 <case1+0x2c4>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	3301      	adds	r3, #1
 8000e64:	4a14      	ldr	r2, [pc, #80]	; (8000eb8 <case1+0x2c4>)
 8000e66:	6013      	str	r3, [r2, #0]
		break;
 8000e68:	e055      	b.n	8000f16 <case1+0x322>
		LED_YELLOW_4();
 8000e6a:	f000 fae1 	bl	8001430 <LED_YELLOW_4>
		if (r == 1) {
 8000e6e:	4b09      	ldr	r3, [pc, #36]	; (8000e94 <case1+0x2a0>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d128      	bne.n	8000ec8 <case1+0x2d4>
			display7SEG_1(j_2 / 10);
 8000e76:	4b13      	ldr	r3, [pc, #76]	; (8000ec4 <case1+0x2d0>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a08      	ldr	r2, [pc, #32]	; (8000e9c <case1+0x2a8>)
 8000e7c:	fb82 1203 	smull	r1, r2, r2, r3
 8000e80:	1092      	asrs	r2, r2, #2
 8000e82:	17db      	asrs	r3, r3, #31
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	4618      	mov	r0, r3
 8000e88:	f7ff fd24 	bl	80008d4 <display7SEG_1>
 8000e8c:	e02c      	b.n	8000ee8 <case1+0x2f4>
 8000e8e:	bf00      	nop
 8000e90:	200000ec 	.word	0x200000ec
 8000e94:	20000078 	.word	0x20000078
 8000e98:	2000005c 	.word	0x2000005c
 8000e9c:	66666667 	.word	0x66666667
 8000ea0:	2000007c 	.word	0x2000007c
 8000ea4:	20000080 	.word	0x20000080
 8000ea8:	20000064 	.word	0x20000064
 8000eac:	20000088 	.word	0x20000088
 8000eb0:	20000060 	.word	0x20000060
 8000eb4:	20000084 	.word	0x20000084
 8000eb8:	20000058 	.word	0x20000058
 8000ebc:	20000068 	.word	0x20000068
 8000ec0:	20000070 	.word	0x20000070
 8000ec4:	2000006c 	.word	0x2000006c
			display7SEG_1(j_2 % 10);
 8000ec8:	4b15      	ldr	r3, [pc, #84]	; (8000f20 <case1+0x32c>)
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	4b15      	ldr	r3, [pc, #84]	; (8000f24 <case1+0x330>)
 8000ece:	fb83 1302 	smull	r1, r3, r3, r2
 8000ed2:	1099      	asrs	r1, r3, #2
 8000ed4:	17d3      	asrs	r3, r2, #31
 8000ed6:	1ac9      	subs	r1, r1, r3
 8000ed8:	460b      	mov	r3, r1
 8000eda:	009b      	lsls	r3, r3, #2
 8000edc:	440b      	add	r3, r1
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	1ad1      	subs	r1, r2, r3
 8000ee2:	4608      	mov	r0, r1
 8000ee4:	f7ff fcf6 	bl	80008d4 <display7SEG_1>
		if(dem == 0){
 8000ee8:	4b0f      	ldr	r3, [pc, #60]	; (8000f28 <case1+0x334>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d104      	bne.n	8000efa <case1+0x306>
			j_2--;
 8000ef0:	4b0b      	ldr	r3, [pc, #44]	; (8000f20 <case1+0x32c>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	3b01      	subs	r3, #1
 8000ef6:	4a0a      	ldr	r2, [pc, #40]	; (8000f20 <case1+0x32c>)
 8000ef8:	6013      	str	r3, [r2, #0]
		if(j_2 == 0) {
 8000efa:	4b09      	ldr	r3, [pc, #36]	; (8000f20 <case1+0x32c>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d10b      	bne.n	8000f1a <case1+0x326>
			j_2 = max_Yellow;
 8000f02:	4b0a      	ldr	r3, [pc, #40]	; (8000f2c <case1+0x338>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a06      	ldr	r2, [pc, #24]	; (8000f20 <case1+0x32c>)
 8000f08:	6013      	str	r3, [r2, #0]
			counter2 = 0;
 8000f0a:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <case1+0x33c>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
		break;
 8000f10:	e003      	b.n	8000f1a <case1+0x326>
		break;
 8000f12:	bf00      	nop
 8000f14:	e002      	b.n	8000f1c <case1+0x328>
		break;
 8000f16:	bf00      	nop
 8000f18:	e000      	b.n	8000f1c <case1+0x328>
		break;
 8000f1a:	bf00      	nop
}
 8000f1c:	bf00      	nop
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	2000006c 	.word	0x2000006c
 8000f24:	66666667 	.word	0x66666667
 8000f28:	2000007c 	.word	0x2000007c
 8000f2c:	20000084 	.word	0x20000084
 8000f30:	20000058 	.word	0x20000058

08000f34 <case2>:

#include "fsm_manual.h"
#include "scheduler.h"
int temp, test_1 = 0;

int case2(int mode, int a){
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	6039      	str	r1, [r7, #0]
	if(en0 == 1)
 8000f3e:	4b37      	ldr	r3, [pc, #220]	; (800101c <case2+0xe8>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d11b      	bne.n	8000f7e <case2+0x4a>
		switch(mode){
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2b03      	cmp	r3, #3
 8000f4a:	d013      	beq.n	8000f74 <case2+0x40>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2b03      	cmp	r3, #3
 8000f50:	dc17      	bgt.n	8000f82 <case2+0x4e>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d003      	beq.n	8000f60 <case2+0x2c>
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2b02      	cmp	r3, #2
 8000f5c:	d005      	beq.n	8000f6a <case2+0x36>
 8000f5e:	e010      	b.n	8000f82 <case2+0x4e>
		case 1:
//			LED_RED_1();
//			LED_RED_2();
			LED_RED_3();
 8000f60:	f000 fa0c 	bl	800137c <LED_RED_3>
			LED_RED_4();
 8000f64:	f000 fa40 	bl	80013e8 <LED_RED_4>
			break;
 8000f68:	e00b      	b.n	8000f82 <case2+0x4e>
		case 2:
//			LED_YELLOW_1();
//			LED_YELLOW_2();
			LED_YELLOW_3();
 8000f6a:	f000 fa2b 	bl	80013c4 <LED_YELLOW_3>
			LED_YELLOW_4();
 8000f6e:	f000 fa5f 	bl	8001430 <LED_YELLOW_4>
			break;
 8000f72:	e006      	b.n	8000f82 <case2+0x4e>
		case 3:
//			LED_GREEN_1();
//			LED_GREEN_2();
			LED_GREEN_3();
 8000f74:	f000 fa14 	bl	80013a0 <LED_GREEN_3>
			LED_GREEN_4();
 8000f78:	f000 fa48 	bl	800140c <LED_GREEN_4>
			break;
 8000f7c:	e001      	b.n	8000f82 <case2+0x4e>
		}
	else{
		off_LED();
 8000f7e:	f000 fa69 	bl	8001454 <off_LED>
	}

	if(button_flag[1] == 1){
 8000f82:	4b27      	ldr	r3, [pc, #156]	; (8001020 <case2+0xec>)
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d10b      	bne.n	8000fa2 <case2+0x6e>
	  button_flag[1] = 0;
 8000f8a:	4b25      	ldr	r3, [pc, #148]	; (8001020 <case2+0xec>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	605a      	str	r2, [r3, #4]
	  if(a == 99){
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	2b63      	cmp	r3, #99	; 0x63
 8000f94:	d102      	bne.n	8000f9c <case2+0x68>
		  a = 1;
 8000f96:	2301      	movs	r3, #1
 8000f98:	603b      	str	r3, [r7, #0]
 8000f9a:	e002      	b.n	8000fa2 <case2+0x6e>
	  }else
		  a++;
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	603b      	str	r3, [r7, #0]
	}
	if(button_flag[3] == 1){
 8000fa2:	4b1f      	ldr	r3, [pc, #124]	; (8001020 <case2+0xec>)
 8000fa4:	68db      	ldr	r3, [r3, #12]
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d105      	bne.n	8000fb6 <case2+0x82>
	  button_flag[3] = 0;
 8000faa:	4b1d      	ldr	r3, [pc, #116]	; (8001020 <case2+0xec>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	60da      	str	r2, [r3, #12]
	  a--;
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	3b01      	subs	r3, #1
 8000fb4:	603b      	str	r3, [r7, #0]
	}
	if(a == 0){
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d101      	bne.n	8000fc0 <case2+0x8c>
	  a = 99;
 8000fbc:	2363      	movs	r3, #99	; 0x63
 8000fbe:	603b      	str	r3, [r7, #0]
	}
	if(button_flag[2] == 1){
 8000fc0:	4b17      	ldr	r3, [pc, #92]	; (8001020 <case2+0xec>)
 8000fc2:	689b      	ldr	r3, [r3, #8]
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d11b      	bne.n	8001000 <case2+0xcc>
	  button_flag[2] = 0;
 8000fc8:	4b15      	ldr	r3, [pc, #84]	; (8001020 <case2+0xec>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	609a      	str	r2, [r3, #8]
	  switch(mode){
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2b03      	cmp	r3, #3
 8000fd2:	d011      	beq.n	8000ff8 <case2+0xc4>
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2b03      	cmp	r3, #3
 8000fd8:	dc13      	bgt.n	8001002 <case2+0xce>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d003      	beq.n	8000fe8 <case2+0xb4>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2b02      	cmp	r3, #2
 8000fe4:	d004      	beq.n	8000ff0 <case2+0xbc>
 8000fe6:	e00c      	b.n	8001002 <case2+0xce>
	  case 1:
		  prev_max_Red = a;
 8000fe8:	4a0e      	ldr	r2, [pc, #56]	; (8001024 <case2+0xf0>)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	6013      	str	r3, [r2, #0]
		  break;
 8000fee:	e008      	b.n	8001002 <case2+0xce>
	  case 2:
		  prev_max_Yellow = a;
 8000ff0:	4a0d      	ldr	r2, [pc, #52]	; (8001028 <case2+0xf4>)
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	6013      	str	r3, [r2, #0]
		  break;
 8000ff6:	e004      	b.n	8001002 <case2+0xce>
	  case 3:
		  prev_max_Green = a;
 8000ff8:	4a0c      	ldr	r2, [pc, #48]	; (800102c <case2+0xf8>)
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	6013      	str	r3, [r2, #0]
		  break;
 8000ffe:	e000      	b.n	8001002 <case2+0xce>
	  }
	}
 8001000:	bf00      	nop
	x = a;
 8001002:	4a0b      	ldr	r2, [pc, #44]	; (8001030 <case2+0xfc>)
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	6013      	str	r3, [r2, #0]
	display7SEG_1(mode + 1);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	3301      	adds	r3, #1
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff fc61 	bl	80008d4 <display7SEG_1>
	return a;
 8001012:	683b      	ldr	r3, [r7, #0]
}
 8001014:	4618      	mov	r0, r3
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	20000050 	.word	0x20000050
 8001020:	200000c0 	.word	0x200000c0
 8001024:	2000008c 	.word	0x2000008c
 8001028:	20000090 	.word	0x20000090
 800102c:	20000094 	.word	0x20000094
 8001030:	200000e8 	.word	0x200000e8

08001034 <fsm_manual>:

void fsm_manual(){
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
	if(button_flag[0] == 1){
 8001038:	4b73      	ldr	r3, [pc, #460]	; (8001208 <fsm_manual+0x1d4>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2b01      	cmp	r3, #1
 800103e:	d14f      	bne.n	80010e0 <fsm_manual+0xac>
		button_flag[0] = 0;
 8001040:	4b71      	ldr	r3, [pc, #452]	; (8001208 <fsm_manual+0x1d4>)
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
		mode++;
 8001046:	4b71      	ldr	r3, [pc, #452]	; (800120c <fsm_manual+0x1d8>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	3301      	adds	r3, #1
 800104c:	4a6f      	ldr	r2, [pc, #444]	; (800120c <fsm_manual+0x1d8>)
 800104e:	6013      	str	r3, [r2, #0]
		test_1 = 1;
 8001050:	4b6f      	ldr	r3, [pc, #444]	; (8001210 <fsm_manual+0x1dc>)
 8001052:	2201      	movs	r2, #1
 8001054:	601a      	str	r2, [r3, #0]
		if(mode == 4) {
 8001056:	4b6d      	ldr	r3, [pc, #436]	; (800120c <fsm_manual+0x1d8>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	2b04      	cmp	r3, #4
 800105c:	d137      	bne.n	80010ce <fsm_manual+0x9a>
			SCH_Delete_Task(3);
 800105e:	2003      	movs	r0, #3
 8001060:	f000 fc50 	bl	8001904 <SCH_Delete_Task>
			if(prev_max_Red == prev_max_Green + prev_max_Yellow){
 8001064:	4b6b      	ldr	r3, [pc, #428]	; (8001214 <fsm_manual+0x1e0>)
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	4b6b      	ldr	r3, [pc, #428]	; (8001218 <fsm_manual+0x1e4>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	441a      	add	r2, r3
 800106e:	4b6b      	ldr	r3, [pc, #428]	; (800121c <fsm_manual+0x1e8>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	429a      	cmp	r2, r3
 8001074:	d10c      	bne.n	8001090 <fsm_manual+0x5c>
				max_Red = prev_max_Red;
 8001076:	4b69      	ldr	r3, [pc, #420]	; (800121c <fsm_manual+0x1e8>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a69      	ldr	r2, [pc, #420]	; (8001220 <fsm_manual+0x1ec>)
 800107c:	6013      	str	r3, [r2, #0]
				max_Green = prev_max_Green;
 800107e:	4b65      	ldr	r3, [pc, #404]	; (8001214 <fsm_manual+0x1e0>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a68      	ldr	r2, [pc, #416]	; (8001224 <fsm_manual+0x1f0>)
 8001084:	6013      	str	r3, [r2, #0]
				max_Yellow = prev_max_Yellow;
 8001086:	4b64      	ldr	r3, [pc, #400]	; (8001218 <fsm_manual+0x1e4>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a67      	ldr	r2, [pc, #412]	; (8001228 <fsm_manual+0x1f4>)
 800108c:	6013      	str	r3, [r2, #0]
 800108e:	e018      	b.n	80010c2 <fsm_manual+0x8e>
			}else if(prev_max_Red > prev_max_Yellow){
 8001090:	4b62      	ldr	r3, [pc, #392]	; (800121c <fsm_manual+0x1e8>)
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	4b60      	ldr	r3, [pc, #384]	; (8001218 <fsm_manual+0x1e4>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	429a      	cmp	r2, r3
 800109a:	dd12      	ble.n	80010c2 <fsm_manual+0x8e>
				prev_max_Green = prev_max_Red - prev_max_Yellow;
 800109c:	4b5f      	ldr	r3, [pc, #380]	; (800121c <fsm_manual+0x1e8>)
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	4b5d      	ldr	r3, [pc, #372]	; (8001218 <fsm_manual+0x1e4>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	4a5b      	ldr	r2, [pc, #364]	; (8001214 <fsm_manual+0x1e0>)
 80010a8:	6013      	str	r3, [r2, #0]
				max_Red = prev_max_Red;
 80010aa:	4b5c      	ldr	r3, [pc, #368]	; (800121c <fsm_manual+0x1e8>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a5c      	ldr	r2, [pc, #368]	; (8001220 <fsm_manual+0x1ec>)
 80010b0:	6013      	str	r3, [r2, #0]
				max_Green = prev_max_Green;
 80010b2:	4b58      	ldr	r3, [pc, #352]	; (8001214 <fsm_manual+0x1e0>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a5b      	ldr	r2, [pc, #364]	; (8001224 <fsm_manual+0x1f0>)
 80010b8:	6013      	str	r3, [r2, #0]
				max_Yellow = prev_max_Yellow;
 80010ba:	4b57      	ldr	r3, [pc, #348]	; (8001218 <fsm_manual+0x1e4>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a5a      	ldr	r2, [pc, #360]	; (8001228 <fsm_manual+0x1f4>)
 80010c0:	6013      	str	r3, [r2, #0]
			}
			Reset();
 80010c2:	f7ff fd2f 	bl	8000b24 <Reset>
			mode = 0;
 80010c6:	4b51      	ldr	r3, [pc, #324]	; (800120c <fsm_manual+0x1d8>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	e008      	b.n	80010e0 <fsm_manual+0xac>
		}else if(mode == 1){
 80010ce:	4b4f      	ldr	r3, [pc, #316]	; (800120c <fsm_manual+0x1d8>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d104      	bne.n	80010e0 <fsm_manual+0xac>
			SCH_Add_Task(setup_Led7SEG, 0, 50);
 80010d6:	2232      	movs	r2, #50	; 0x32
 80010d8:	2100      	movs	r1, #0
 80010da:	4854      	ldr	r0, [pc, #336]	; (800122c <fsm_manual+0x1f8>)
 80010dc:	f000 fb08 	bl	80016f0 <SCH_Add_Task>
		}
	}

	switch(mode){
 80010e0:	4b4a      	ldr	r3, [pc, #296]	; (800120c <fsm_manual+0x1d8>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2b03      	cmp	r3, #3
 80010e6:	f200 808d 	bhi.w	8001204 <fsm_manual+0x1d0>
 80010ea:	a201      	add	r2, pc, #4	; (adr r2, 80010f0 <fsm_manual+0xbc>)
 80010ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010f0:	08001101 	.word	0x08001101
 80010f4:	08001179 	.word	0x08001179
 80010f8:	080011a7 	.word	0x080011a7
 80010fc:	080011d5 	.word	0x080011d5
	case 0:
		switch(en0){
 8001100:	4b4b      	ldr	r3, [pc, #300]	; (8001230 <fsm_manual+0x1fc>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d002      	beq.n	800110e <fsm_manual+0xda>
 8001108:	2b01      	cmp	r3, #1
 800110a:	d007      	beq.n	800111c <fsm_manual+0xe8>
 800110c:	e00d      	b.n	800112a <fsm_manual+0xf6>
		case 0:
			en0 = 1;
 800110e:	4b48      	ldr	r3, [pc, #288]	; (8001230 <fsm_manual+0x1fc>)
 8001110:	2201      	movs	r2, #1
 8001112:	601a      	str	r2, [r3, #0]
			en1 = 0;
 8001114:	4b47      	ldr	r3, [pc, #284]	; (8001234 <fsm_manual+0x200>)
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
			break;
 800111a:	e006      	b.n	800112a <fsm_manual+0xf6>
		case 1:
			en0 = 0;
 800111c:	4b44      	ldr	r3, [pc, #272]	; (8001230 <fsm_manual+0x1fc>)
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
			en1 = 1;
 8001122:	4b44      	ldr	r3, [pc, #272]	; (8001234 <fsm_manual+0x200>)
 8001124:	2201      	movs	r2, #1
 8001126:	601a      	str	r2, [r3, #0]
			break;
 8001128:	bf00      	nop
		}
		if(mode == 0){
 800112a:	4b38      	ldr	r3, [pc, #224]	; (800120c <fsm_manual+0x1d8>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d108      	bne.n	8001144 <fsm_manual+0x110>
			en2 = en0;
 8001132:	4b3f      	ldr	r3, [pc, #252]	; (8001230 <fsm_manual+0x1fc>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a40      	ldr	r2, [pc, #256]	; (8001238 <fsm_manual+0x204>)
 8001138:	6013      	str	r3, [r2, #0]
			en3 = en1;
 800113a:	4b3e      	ldr	r3, [pc, #248]	; (8001234 <fsm_manual+0x200>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a3f      	ldr	r2, [pc, #252]	; (800123c <fsm_manual+0x208>)
 8001140:	6013      	str	r3, [r2, #0]
 8001142:	e005      	b.n	8001150 <fsm_manual+0x11c>
		}else{
			en2 = 0;
 8001144:	4b3c      	ldr	r3, [pc, #240]	; (8001238 <fsm_manual+0x204>)
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
			en3 = 1;
 800114a:	4b3c      	ldr	r3, [pc, #240]	; (800123c <fsm_manual+0x208>)
 800114c:	2201      	movs	r2, #1
 800114e:	601a      	str	r2, [r3, #0]
		}
		r = -r;
 8001150:	4b3b      	ldr	r3, [pc, #236]	; (8001240 <fsm_manual+0x20c>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	425b      	negs	r3, r3
 8001156:	4a3a      	ldr	r2, [pc, #232]	; (8001240 <fsm_manual+0x20c>)
 8001158:	6013      	str	r3, [r2, #0]
		dem--;
 800115a:	4b3a      	ldr	r3, [pc, #232]	; (8001244 <fsm_manual+0x210>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	3b01      	subs	r3, #1
 8001160:	4a38      	ldr	r2, [pc, #224]	; (8001244 <fsm_manual+0x210>)
 8001162:	6013      	str	r3, [r2, #0]
		case1();
 8001164:	f7ff fd46 	bl	8000bf4 <case1>
		if(dem == 0){
 8001168:	4b36      	ldr	r3, [pc, #216]	; (8001244 <fsm_manual+0x210>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d148      	bne.n	8001202 <fsm_manual+0x1ce>
			dem = 2;
 8001170:	4b34      	ldr	r3, [pc, #208]	; (8001244 <fsm_manual+0x210>)
 8001172:	2202      	movs	r2, #2
 8001174:	601a      	str	r2, [r3, #0]
		}
	  break;
 8001176:	e044      	b.n	8001202 <fsm_manual+0x1ce>
	case 1:
		if(test_1 == 1){
 8001178:	4b25      	ldr	r3, [pc, #148]	; (8001210 <fsm_manual+0x1dc>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2b01      	cmp	r3, #1
 800117e:	d106      	bne.n	800118e <fsm_manual+0x15a>
			temp = max_Red;
 8001180:	4b27      	ldr	r3, [pc, #156]	; (8001220 <fsm_manual+0x1ec>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a30      	ldr	r2, [pc, #192]	; (8001248 <fsm_manual+0x214>)
 8001186:	6013      	str	r3, [r2, #0]
			test_1 = 0;
 8001188:	4b21      	ldr	r3, [pc, #132]	; (8001210 <fsm_manual+0x1dc>)
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
		}
		temp = case2(mode,temp);
 800118e:	4b1f      	ldr	r3, [pc, #124]	; (800120c <fsm_manual+0x1d8>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a2d      	ldr	r2, [pc, #180]	; (8001248 <fsm_manual+0x214>)
 8001194:	6812      	ldr	r2, [r2, #0]
 8001196:	4611      	mov	r1, r2
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff fecb 	bl	8000f34 <case2>
 800119e:	4603      	mov	r3, r0
 80011a0:	4a29      	ldr	r2, [pc, #164]	; (8001248 <fsm_manual+0x214>)
 80011a2:	6013      	str	r3, [r2, #0]
		break;
 80011a4:	e02e      	b.n	8001204 <fsm_manual+0x1d0>
	case 2:
		if(test_1 == 1){
 80011a6:	4b1a      	ldr	r3, [pc, #104]	; (8001210 <fsm_manual+0x1dc>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d106      	bne.n	80011bc <fsm_manual+0x188>
			temp = max_Yellow;
 80011ae:	4b1e      	ldr	r3, [pc, #120]	; (8001228 <fsm_manual+0x1f4>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a25      	ldr	r2, [pc, #148]	; (8001248 <fsm_manual+0x214>)
 80011b4:	6013      	str	r3, [r2, #0]
			test_1 = 0;
 80011b6:	4b16      	ldr	r3, [pc, #88]	; (8001210 <fsm_manual+0x1dc>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
		}
		temp = case2(mode, temp);
 80011bc:	4b13      	ldr	r3, [pc, #76]	; (800120c <fsm_manual+0x1d8>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a21      	ldr	r2, [pc, #132]	; (8001248 <fsm_manual+0x214>)
 80011c2:	6812      	ldr	r2, [r2, #0]
 80011c4:	4611      	mov	r1, r2
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff feb4 	bl	8000f34 <case2>
 80011cc:	4603      	mov	r3, r0
 80011ce:	4a1e      	ldr	r2, [pc, #120]	; (8001248 <fsm_manual+0x214>)
 80011d0:	6013      	str	r3, [r2, #0]
		break;
 80011d2:	e017      	b.n	8001204 <fsm_manual+0x1d0>
	case 3:
		if(test_1 == 1){
 80011d4:	4b0e      	ldr	r3, [pc, #56]	; (8001210 <fsm_manual+0x1dc>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d106      	bne.n	80011ea <fsm_manual+0x1b6>
			temp = max_Green;
 80011dc:	4b11      	ldr	r3, [pc, #68]	; (8001224 <fsm_manual+0x1f0>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a19      	ldr	r2, [pc, #100]	; (8001248 <fsm_manual+0x214>)
 80011e2:	6013      	str	r3, [r2, #0]
			test_1 = 0;
 80011e4:	4b0a      	ldr	r3, [pc, #40]	; (8001210 <fsm_manual+0x1dc>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
		}
		temp = case2(mode, temp);
 80011ea:	4b08      	ldr	r3, [pc, #32]	; (800120c <fsm_manual+0x1d8>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a16      	ldr	r2, [pc, #88]	; (8001248 <fsm_manual+0x214>)
 80011f0:	6812      	ldr	r2, [r2, #0]
 80011f2:	4611      	mov	r1, r2
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff fe9d 	bl	8000f34 <case2>
 80011fa:	4603      	mov	r3, r0
 80011fc:	4a12      	ldr	r2, [pc, #72]	; (8001248 <fsm_manual+0x214>)
 80011fe:	6013      	str	r3, [r2, #0]
		break;
 8001200:	e000      	b.n	8001204 <fsm_manual+0x1d0>
	  break;
 8001202:	bf00      	nop
	}
}
 8001204:	bf00      	nop
 8001206:	bd80      	pop	{r7, pc}
 8001208:	200000c0 	.word	0x200000c0
 800120c:	200000d8 	.word	0x200000d8
 8001210:	200000d4 	.word	0x200000d4
 8001214:	20000094 	.word	0x20000094
 8001218:	20000090 	.word	0x20000090
 800121c:	2000008c 	.word	0x2000008c
 8001220:	20000080 	.word	0x20000080
 8001224:	20000088 	.word	0x20000088
 8001228:	20000084 	.word	0x20000084
 800122c:	080012ad 	.word	0x080012ad
 8001230:	20000050 	.word	0x20000050
 8001234:	200000dc 	.word	0x200000dc
 8001238:	20000054 	.word	0x20000054
 800123c:	200000e0 	.word	0x200000e0
 8001240:	20000078 	.word	0x20000078
 8001244:	2000007c 	.word	0x2000007c
 8001248:	20000150 	.word	0x20000150

0800124c <turn_Led7SEG>:

#include "fsm_setting.h"

int mode = 0, en0 = 1, en1 = 0, en2 = 1, en3 = 0;

void turn_Led7SEG(){
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN0_GPIO_Port,EN0_Pin, en0);
 8001250:	4b11      	ldr	r3, [pc, #68]	; (8001298 <turn_Led7SEG+0x4c>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	b2db      	uxtb	r3, r3
 8001256:	461a      	mov	r2, r3
 8001258:	2140      	movs	r1, #64	; 0x40
 800125a:	4810      	ldr	r0, [pc, #64]	; (800129c <turn_Led7SEG+0x50>)
 800125c:	f000 ffaf 	bl	80021be <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port,EN1_Pin, en1);
 8001260:	4b0f      	ldr	r3, [pc, #60]	; (80012a0 <turn_Led7SEG+0x54>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	b2db      	uxtb	r3, r3
 8001266:	461a      	mov	r2, r3
 8001268:	2180      	movs	r1, #128	; 0x80
 800126a:	480c      	ldr	r0, [pc, #48]	; (800129c <turn_Led7SEG+0x50>)
 800126c:	f000 ffa7 	bl	80021be <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port,EN2_Pin, en2);
 8001270:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <turn_Led7SEG+0x58>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	b2db      	uxtb	r3, r3
 8001276:	461a      	mov	r2, r3
 8001278:	f44f 7180 	mov.w	r1, #256	; 0x100
 800127c:	4807      	ldr	r0, [pc, #28]	; (800129c <turn_Led7SEG+0x50>)
 800127e:	f000 ff9e 	bl	80021be <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port,EN3_Pin, en3);
 8001282:	4b09      	ldr	r3, [pc, #36]	; (80012a8 <turn_Led7SEG+0x5c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	b2db      	uxtb	r3, r3
 8001288:	461a      	mov	r2, r3
 800128a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800128e:	4803      	ldr	r0, [pc, #12]	; (800129c <turn_Led7SEG+0x50>)
 8001290:	f000 ff95 	bl	80021be <HAL_GPIO_WritePin>
}
 8001294:	bf00      	nop
 8001296:	bd80      	pop	{r7, pc}
 8001298:	20000050 	.word	0x20000050
 800129c:	40010800 	.word	0x40010800
 80012a0:	200000dc 	.word	0x200000dc
 80012a4:	20000054 	.word	0x20000054
 80012a8:	200000e0 	.word	0x200000e0

080012ac <setup_Led7SEG>:

void setup_Led7SEG(){
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
	switch(en0){
 80012b0:	4b27      	ldr	r3, [pc, #156]	; (8001350 <setup_Led7SEG+0xa4>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d002      	beq.n	80012be <setup_Led7SEG+0x12>
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d007      	beq.n	80012cc <setup_Led7SEG+0x20>
 80012bc:	e00d      	b.n	80012da <setup_Led7SEG+0x2e>
	case 0:
		en0 = 1;
 80012be:	4b24      	ldr	r3, [pc, #144]	; (8001350 <setup_Led7SEG+0xa4>)
 80012c0:	2201      	movs	r2, #1
 80012c2:	601a      	str	r2, [r3, #0]
		en1 = 0;
 80012c4:	4b23      	ldr	r3, [pc, #140]	; (8001354 <setup_Led7SEG+0xa8>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
		break;
 80012ca:	e006      	b.n	80012da <setup_Led7SEG+0x2e>
	case 1:
		en0 = 0;
 80012cc:	4b20      	ldr	r3, [pc, #128]	; (8001350 <setup_Led7SEG+0xa4>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
		en1 = 1;
 80012d2:	4b20      	ldr	r3, [pc, #128]	; (8001354 <setup_Led7SEG+0xa8>)
 80012d4:	2201      	movs	r2, #1
 80012d6:	601a      	str	r2, [r3, #0]
		break;
 80012d8:	bf00      	nop
	}

	if(mode == 0){
 80012da:	4b1f      	ldr	r3, [pc, #124]	; (8001358 <setup_Led7SEG+0xac>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d108      	bne.n	80012f4 <setup_Led7SEG+0x48>
		en2 = en0;
 80012e2:	4b1b      	ldr	r3, [pc, #108]	; (8001350 <setup_Led7SEG+0xa4>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a1d      	ldr	r2, [pc, #116]	; (800135c <setup_Led7SEG+0xb0>)
 80012e8:	6013      	str	r3, [r2, #0]
		en3 = en1;
 80012ea:	4b1a      	ldr	r3, [pc, #104]	; (8001354 <setup_Led7SEG+0xa8>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a1c      	ldr	r2, [pc, #112]	; (8001360 <setup_Led7SEG+0xb4>)
 80012f0:	6013      	str	r3, [r2, #0]
 80012f2:	e005      	b.n	8001300 <setup_Led7SEG+0x54>
	}else{
		en2 = 0;
 80012f4:	4b19      	ldr	r3, [pc, #100]	; (800135c <setup_Led7SEG+0xb0>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
		en3 = 1;
 80012fa:	4b19      	ldr	r3, [pc, #100]	; (8001360 <setup_Led7SEG+0xb4>)
 80012fc:	2201      	movs	r2, #1
 80012fe:	601a      	str	r2, [r3, #0]
	}
	r = -r;
 8001300:	4b18      	ldr	r3, [pc, #96]	; (8001364 <setup_Led7SEG+0xb8>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	425b      	negs	r3, r3
 8001306:	4a17      	ldr	r2, [pc, #92]	; (8001364 <setup_Led7SEG+0xb8>)
 8001308:	6013      	str	r3, [r2, #0]
	if(r == 1)
 800130a:	4b16      	ldr	r3, [pc, #88]	; (8001364 <setup_Led7SEG+0xb8>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	2b01      	cmp	r3, #1
 8001310:	d10b      	bne.n	800132a <setup_Led7SEG+0x7e>
		display7SEG(x / 10);
 8001312:	4b15      	ldr	r3, [pc, #84]	; (8001368 <setup_Led7SEG+0xbc>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a15      	ldr	r2, [pc, #84]	; (800136c <setup_Led7SEG+0xc0>)
 8001318:	fb82 1203 	smull	r1, r2, r2, r3
 800131c:	1092      	asrs	r2, r2, #2
 800131e:	17db      	asrs	r3, r3, #31
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff f8f2 	bl	800050c <display7SEG>
	else
		display7SEG(x % 10);
}
 8001328:	e00f      	b.n	800134a <setup_Led7SEG+0x9e>
		display7SEG(x % 10);
 800132a:	4b0f      	ldr	r3, [pc, #60]	; (8001368 <setup_Led7SEG+0xbc>)
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	4b0f      	ldr	r3, [pc, #60]	; (800136c <setup_Led7SEG+0xc0>)
 8001330:	fb83 1302 	smull	r1, r3, r3, r2
 8001334:	1099      	asrs	r1, r3, #2
 8001336:	17d3      	asrs	r3, r2, #31
 8001338:	1ac9      	subs	r1, r1, r3
 800133a:	460b      	mov	r3, r1
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	440b      	add	r3, r1
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	1ad1      	subs	r1, r2, r3
 8001344:	4608      	mov	r0, r1
 8001346:	f7ff f8e1 	bl	800050c <display7SEG>
}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	20000050 	.word	0x20000050
 8001354:	200000dc 	.word	0x200000dc
 8001358:	200000d8 	.word	0x200000d8
 800135c:	20000054 	.word	0x20000054
 8001360:	200000e0 	.word	0x200000e0
 8001364:	20000078 	.word	0x20000078
 8001368:	200000e8 	.word	0x200000e8
 800136c:	66666667 	.word	0x66666667

08001370 <fsm_setting>:

void fsm_setting(){
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
	turn_Led7SEG();
 8001374:	f7ff ff6a 	bl	800124c <turn_Led7SEG>
}
 8001378:	bf00      	nop
 800137a:	bd80      	pop	{r7, pc}

0800137c <LED_RED_3>:
//void LED_YELLOW_b(void){
//    HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
//    HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_SET);
//}

void LED_RED_3(void) {
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(bit_a_GPIO_Port, bit_a_Pin, GPIO_PIN_SET);
 8001380:	2201      	movs	r2, #1
 8001382:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001386:	4805      	ldr	r0, [pc, #20]	; (800139c <LED_RED_3+0x20>)
 8001388:	f000 ff19 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(bit_b_GPIO_Port, bit_b_Pin, GPIO_PIN_SET);
 800138c:	2201      	movs	r2, #1
 800138e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001392:	4802      	ldr	r0, [pc, #8]	; (800139c <LED_RED_3+0x20>)
 8001394:	f000 ff13 	bl	80021be <HAL_GPIO_WritePin>
}
 8001398:	bf00      	nop
 800139a:	bd80      	pop	{r7, pc}
 800139c:	40010800 	.word	0x40010800

080013a0 <LED_GREEN_3>:

void LED_GREEN_3(void) {
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(bit_a_GPIO_Port, bit_a_Pin, GPIO_PIN_SET);
 80013a4:	2201      	movs	r2, #1
 80013a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013aa:	4805      	ldr	r0, [pc, #20]	; (80013c0 <LED_GREEN_3+0x20>)
 80013ac:	f000 ff07 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(bit_b_GPIO_Port, bit_b_Pin, GPIO_PIN_RESET);
 80013b0:	2200      	movs	r2, #0
 80013b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013b6:	4802      	ldr	r0, [pc, #8]	; (80013c0 <LED_GREEN_3+0x20>)
 80013b8:	f000 ff01 	bl	80021be <HAL_GPIO_WritePin>
}
 80013bc:	bf00      	nop
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	40010800 	.word	0x40010800

080013c4 <LED_YELLOW_3>:

void LED_YELLOW_3(void){
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(bit_a_GPIO_Port, bit_a_Pin, GPIO_PIN_RESET);
 80013c8:	2200      	movs	r2, #0
 80013ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013ce:	4805      	ldr	r0, [pc, #20]	; (80013e4 <LED_YELLOW_3+0x20>)
 80013d0:	f000 fef5 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(bit_b_GPIO_Port, bit_b_Pin, GPIO_PIN_SET);
 80013d4:	2201      	movs	r2, #1
 80013d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013da:	4802      	ldr	r0, [pc, #8]	; (80013e4 <LED_YELLOW_3+0x20>)
 80013dc:	f000 feef 	bl	80021be <HAL_GPIO_WritePin>
}
 80013e0:	bf00      	nop
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	40010800 	.word	0x40010800

080013e8 <LED_RED_4>:

void LED_RED_4(void) {
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(bit_c_GPIO_Port, bit_c_Pin, GPIO_PIN_SET);
 80013ec:	2201      	movs	r2, #1
 80013ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013f2:	4805      	ldr	r0, [pc, #20]	; (8001408 <LED_RED_4+0x20>)
 80013f4:	f000 fee3 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(bit_d_GPIO_Port, bit_d_Pin, GPIO_PIN_SET);
 80013f8:	2201      	movs	r2, #1
 80013fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013fe:	4802      	ldr	r0, [pc, #8]	; (8001408 <LED_RED_4+0x20>)
 8001400:	f000 fedd 	bl	80021be <HAL_GPIO_WritePin>
}
 8001404:	bf00      	nop
 8001406:	bd80      	pop	{r7, pc}
 8001408:	40010800 	.word	0x40010800

0800140c <LED_GREEN_4>:

void LED_GREEN_4(void) {
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(bit_c_GPIO_Port, bit_c_Pin, GPIO_PIN_SET);
 8001410:	2201      	movs	r2, #1
 8001412:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001416:	4805      	ldr	r0, [pc, #20]	; (800142c <LED_GREEN_4+0x20>)
 8001418:	f000 fed1 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(bit_d_GPIO_Port, bit_d_Pin, GPIO_PIN_RESET);
 800141c:	2200      	movs	r2, #0
 800141e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001422:	4802      	ldr	r0, [pc, #8]	; (800142c <LED_GREEN_4+0x20>)
 8001424:	f000 fecb 	bl	80021be <HAL_GPIO_WritePin>
}
 8001428:	bf00      	nop
 800142a:	bd80      	pop	{r7, pc}
 800142c:	40010800 	.word	0x40010800

08001430 <LED_YELLOW_4>:

void LED_YELLOW_4(void){
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(bit_c_GPIO_Port, bit_c_Pin, GPIO_PIN_RESET);
 8001434:	2200      	movs	r2, #0
 8001436:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800143a:	4805      	ldr	r0, [pc, #20]	; (8001450 <LED_YELLOW_4+0x20>)
 800143c:	f000 febf 	bl	80021be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(bit_d_GPIO_Port, bit_d_Pin, GPIO_PIN_SET);
 8001440:	2201      	movs	r2, #1
 8001442:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001446:	4802      	ldr	r0, [pc, #8]	; (8001450 <LED_YELLOW_4+0x20>)
 8001448:	f000 feb9 	bl	80021be <HAL_GPIO_WritePin>
}
 800144c:	bf00      	nop
 800144e:	bd80      	pop	{r7, pc}
 8001450:	40010800 	.word	0x40010800

08001454 <off_LED>:


void off_LED(void){
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(bit_a_GPIO_Port, bit_a_Pin, GPIO_PIN_RESET);
 8001458:	2200      	movs	r2, #0
 800145a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800145e:	480b      	ldr	r0, [pc, #44]	; (800148c <off_LED+0x38>)
 8001460:	f000 fead 	bl	80021be <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(bit_b_GPIO_Port, bit_b_Pin, GPIO_PIN_RESET);
 8001464:	2200      	movs	r2, #0
 8001466:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800146a:	4808      	ldr	r0, [pc, #32]	; (800148c <off_LED+0x38>)
 800146c:	f000 fea7 	bl	80021be <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(bit_c_GPIO_Port, bit_c_Pin, GPIO_PIN_RESET);
 8001470:	2200      	movs	r2, #0
 8001472:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001476:	4805      	ldr	r0, [pc, #20]	; (800148c <off_LED+0x38>)
 8001478:	f000 fea1 	bl	80021be <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(bit_d_GPIO_Port, bit_d_Pin, GPIO_PIN_RESET);
 800147c:	2200      	movs	r2, #0
 800147e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001482:	4802      	ldr	r0, [pc, #8]	; (800148c <off_LED+0x38>)
 8001484:	f000 fe9b 	bl	80021be <HAL_GPIO_WritePin>
}
 8001488:	bf00      	nop
 800148a:	bd80      	pop	{r7, pc}
 800148c:	40010800 	.word	0x40010800

08001490 <LED>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void LED(){
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8001494:	2120      	movs	r1, #32
 8001496:	4802      	ldr	r0, [pc, #8]	; (80014a0 <LED+0x10>)
 8001498:	f000 fea9 	bl	80021ee <HAL_GPIO_TogglePin>
}
 800149c:	bf00      	nop
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	40010800 	.word	0x40010800

080014a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014a8:	f000 fb88 	bl	8001bbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014ac:	f000 f822 	bl	80014f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 80014b0:	f000 f85c 	bl	800156c <MX_TIM2_Init>
  MX_GPIO_Init();
 80014b4:	f000 f8a6 	bl	8001604 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80014b8:	480a      	ldr	r0, [pc, #40]	; (80014e4 <main+0x40>)
 80014ba:	f001 fadd 	bl	8002a78 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  SCH_Add_Task(fsm_setting,0, 1);
 80014be:	2201      	movs	r2, #1
 80014c0:	2100      	movs	r1, #0
 80014c2:	4809      	ldr	r0, [pc, #36]	; (80014e8 <main+0x44>)
 80014c4:	f000 f914 	bl	80016f0 <SCH_Add_Task>
  SCH_Add_Task(fsm_manual, 1, 50);
 80014c8:	2232      	movs	r2, #50	; 0x32
 80014ca:	2101      	movs	r1, #1
 80014cc:	4807      	ldr	r0, [pc, #28]	; (80014ec <main+0x48>)
 80014ce:	f000 f90f 	bl	80016f0 <SCH_Add_Task>
  SCH_Add_Task(LED, 2, 50);
 80014d2:	2232      	movs	r2, #50	; 0x32
 80014d4:	2102      	movs	r1, #2
 80014d6:	4806      	ldr	r0, [pc, #24]	; (80014f0 <main+0x4c>)
 80014d8:	f000 f90a 	bl	80016f0 <SCH_Add_Task>
  while (1)
  {
	  SCH_Dispath_Tasks();
 80014dc:	f000 f9be 	bl	800185c <SCH_Dispath_Tasks>
 80014e0:	e7fc      	b.n	80014dc <main+0x38>
 80014e2:	bf00      	nop
 80014e4:	2000015c 	.word	0x2000015c
 80014e8:	08001371 	.word	0x08001371
 80014ec:	08001035 	.word	0x08001035
 80014f0:	08001491 	.word	0x08001491

080014f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b090      	sub	sp, #64	; 0x40
 80014f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014fa:	f107 0318 	add.w	r3, r7, #24
 80014fe:	2228      	movs	r2, #40	; 0x28
 8001500:	2100      	movs	r1, #0
 8001502:	4618      	mov	r0, r3
 8001504:	f001 fe68 	bl	80031d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001508:	1d3b      	adds	r3, r7, #4
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	605a      	str	r2, [r3, #4]
 8001510:	609a      	str	r2, [r3, #8]
 8001512:	60da      	str	r2, [r3, #12]
 8001514:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001516:	2302      	movs	r3, #2
 8001518:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800151a:	2301      	movs	r3, #1
 800151c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800151e:	2310      	movs	r3, #16
 8001520:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001522:	2300      	movs	r3, #0
 8001524:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001526:	f107 0318 	add.w	r3, r7, #24
 800152a:	4618      	mov	r0, r3
 800152c:	f000 fe78 	bl	8002220 <HAL_RCC_OscConfig>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001536:	f000 f8d5 	bl	80016e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800153a:	230f      	movs	r3, #15
 800153c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800153e:	2300      	movs	r3, #0
 8001540:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001542:	2300      	movs	r3, #0
 8001544:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001546:	2300      	movs	r3, #0
 8001548:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800154a:	2300      	movs	r3, #0
 800154c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800154e:	1d3b      	adds	r3, r7, #4
 8001550:	2100      	movs	r1, #0
 8001552:	4618      	mov	r0, r3
 8001554:	f001 f8e4 	bl	8002720 <HAL_RCC_ClockConfig>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800155e:	f000 f8c1 	bl	80016e4 <Error_Handler>
  }
}
 8001562:	bf00      	nop
 8001564:	3740      	adds	r7, #64	; 0x40
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
	...

0800156c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b086      	sub	sp, #24
 8001570:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001572:	f107 0308 	add.w	r3, r7, #8
 8001576:	2200      	movs	r2, #0
 8001578:	601a      	str	r2, [r3, #0]
 800157a:	605a      	str	r2, [r3, #4]
 800157c:	609a      	str	r2, [r3, #8]
 800157e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001580:	463b      	mov	r3, r7
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001588:	4b1d      	ldr	r3, [pc, #116]	; (8001600 <MX_TIM2_Init+0x94>)
 800158a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800158e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001590:	4b1b      	ldr	r3, [pc, #108]	; (8001600 <MX_TIM2_Init+0x94>)
 8001592:	2200      	movs	r2, #0
 8001594:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001596:	4b1a      	ldr	r3, [pc, #104]	; (8001600 <MX_TIM2_Init+0x94>)
 8001598:	2200      	movs	r2, #0
 800159a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800159c:	4b18      	ldr	r3, [pc, #96]	; (8001600 <MX_TIM2_Init+0x94>)
 800159e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015a2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015a4:	4b16      	ldr	r3, [pc, #88]	; (8001600 <MX_TIM2_Init+0x94>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015aa:	4b15      	ldr	r3, [pc, #84]	; (8001600 <MX_TIM2_Init+0x94>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015b0:	4813      	ldr	r0, [pc, #76]	; (8001600 <MX_TIM2_Init+0x94>)
 80015b2:	f001 fa11 	bl	80029d8 <HAL_TIM_Base_Init>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80015bc:	f000 f892 	bl	80016e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015c6:	f107 0308 	add.w	r3, r7, #8
 80015ca:	4619      	mov	r1, r3
 80015cc:	480c      	ldr	r0, [pc, #48]	; (8001600 <MX_TIM2_Init+0x94>)
 80015ce:	f001 fb8f 	bl	8002cf0 <HAL_TIM_ConfigClockSource>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80015d8:	f000 f884 	bl	80016e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015dc:	2300      	movs	r3, #0
 80015de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015e0:	2300      	movs	r3, #0
 80015e2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015e4:	463b      	mov	r3, r7
 80015e6:	4619      	mov	r1, r3
 80015e8:	4805      	ldr	r0, [pc, #20]	; (8001600 <MX_TIM2_Init+0x94>)
 80015ea:	f001 fd67 	bl	80030bc <HAL_TIMEx_MasterConfigSynchronization>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80015f4:	f000 f876 	bl	80016e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80015f8:	bf00      	nop
 80015fa:	3718      	adds	r7, #24
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	2000015c 	.word	0x2000015c

08001604 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800160a:	f107 0308 	add.w	r3, r7, #8
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	605a      	str	r2, [r3, #4]
 8001614:	609a      	str	r2, [r3, #8]
 8001616:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001618:	4b28      	ldr	r3, [pc, #160]	; (80016bc <MX_GPIO_Init+0xb8>)
 800161a:	699b      	ldr	r3, [r3, #24]
 800161c:	4a27      	ldr	r2, [pc, #156]	; (80016bc <MX_GPIO_Init+0xb8>)
 800161e:	f043 0304 	orr.w	r3, r3, #4
 8001622:	6193      	str	r3, [r2, #24]
 8001624:	4b25      	ldr	r3, [pc, #148]	; (80016bc <MX_GPIO_Init+0xb8>)
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	f003 0304 	and.w	r3, r3, #4
 800162c:	607b      	str	r3, [r7, #4]
 800162e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001630:	4b22      	ldr	r3, [pc, #136]	; (80016bc <MX_GPIO_Init+0xb8>)
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	4a21      	ldr	r2, [pc, #132]	; (80016bc <MX_GPIO_Init+0xb8>)
 8001636:	f043 0308 	orr.w	r3, r3, #8
 800163a:	6193      	str	r3, [r2, #24]
 800163c:	4b1f      	ldr	r3, [pc, #124]	; (80016bc <MX_GPIO_Init+0xb8>)
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	f003 0308 	and.w	r3, r3, #8
 8001644:	603b      	str	r3, [r7, #0]
 8001646:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LED_RED_Pin|EN0_Pin|EN1_Pin
 8001648:	2200      	movs	r2, #0
 800164a:	f643 71f0 	movw	r1, #16368	; 0x3ff0
 800164e:	481c      	ldr	r0, [pc, #112]	; (80016c0 <MX_GPIO_Init+0xbc>)
 8001650:	f000 fdb5 	bl	80021be <HAL_GPIO_WritePin>
                          |EN2_Pin|EN3_Pin|bit_a_Pin|bit_b_Pin
                          |bit_c_Pin|bit_d_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, a1_Pin|b1_Pin|c1_Pin|d_Pin
 8001654:	2200      	movs	r2, #0
 8001656:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800165a:	481a      	ldr	r0, [pc, #104]	; (80016c4 <MX_GPIO_Init+0xc0>)
 800165c:	f000 fdaf 	bl	80021be <HAL_GPIO_WritePin>
                          |e_Pin|f_Pin|g_Pin|GPIO_PIN_14
                          |x_Pin|d1_Pin|e1_Pin|f1_Pin
                          |g1_Pin|a_Pin|b_Pin|c_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Button1_Pin Button2_Pin Button3_Pin Button4_Pin */
  GPIO_InitStruct.Pin = Button1_Pin|Button2_Pin|Button3_Pin|Button4_Pin;
 8001660:	230f      	movs	r3, #15
 8001662:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001664:	2300      	movs	r3, #0
 8001666:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001668:	2301      	movs	r3, #1
 800166a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800166c:	f107 0308 	add.w	r3, r7, #8
 8001670:	4619      	mov	r1, r3
 8001672:	4813      	ldr	r0, [pc, #76]	; (80016c0 <MX_GPIO_Init+0xbc>)
 8001674:	f000 fc12 	bl	8001e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 LED_RED_Pin EN0_Pin EN1_Pin
                           EN2_Pin EN3_Pin bit_a_Pin bit_b_Pin
                           bit_c_Pin bit_d_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LED_RED_Pin|EN0_Pin|EN1_Pin
 8001678:	f643 73f0 	movw	r3, #16368	; 0x3ff0
 800167c:	60bb      	str	r3, [r7, #8]
                          |EN2_Pin|EN3_Pin|bit_a_Pin|bit_b_Pin
                          |bit_c_Pin|bit_d_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800167e:	2301      	movs	r3, #1
 8001680:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001682:	2300      	movs	r3, #0
 8001684:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001686:	2302      	movs	r3, #2
 8001688:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800168a:	f107 0308 	add.w	r3, r7, #8
 800168e:	4619      	mov	r1, r3
 8001690:	480b      	ldr	r0, [pc, #44]	; (80016c0 <MX_GPIO_Init+0xbc>)
 8001692:	f000 fc03 	bl	8001e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : a1_Pin b1_Pin c1_Pin d_Pin
                           e_Pin f_Pin g_Pin PB14
                           x_Pin d1_Pin e1_Pin f1_Pin
                           g1_Pin a_Pin b_Pin c_Pin */
  GPIO_InitStruct.Pin = a1_Pin|b1_Pin|c1_Pin|d_Pin
 8001696:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800169a:	60bb      	str	r3, [r7, #8]
                          |e_Pin|f_Pin|g_Pin|GPIO_PIN_14
                          |x_Pin|d1_Pin|e1_Pin|f1_Pin
                          |g1_Pin|a_Pin|b_Pin|c_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800169c:	2301      	movs	r3, #1
 800169e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a4:	2302      	movs	r3, #2
 80016a6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a8:	f107 0308 	add.w	r3, r7, #8
 80016ac:	4619      	mov	r1, r3
 80016ae:	4805      	ldr	r0, [pc, #20]	; (80016c4 <MX_GPIO_Init+0xc0>)
 80016b0:	f000 fbf4 	bl	8001e9c <HAL_GPIO_Init>

}
 80016b4:	bf00      	nop
 80016b6:	3718      	adds	r7, #24
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40021000 	.word	0x40021000
 80016c0:	40010800 	.word	0x40010800
 80016c4:	40010c00 	.word	0x40010c00

080016c8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
	SCH_Update();
 80016d0:	f000 f864 	bl	800179c <SCH_Update>
	timerRun();
 80016d4:	f000 f99c 	bl	8001a10 <timerRun>
	getKeyInput();
 80016d8:	f7ff f966 	bl	80009a8 <getKeyInput>

}
 80016dc:	bf00      	nop
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016e8:	b672      	cpsid	i
}
 80016ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016ec:	e7fe      	b.n	80016ec <Error_Handler+0x8>
	...

080016f0 <SCH_Add_Task>:

void SCH_Init(void){
	current_index_task = 0;
}

void SCH_Add_Task(void(*pFuntion)(), uint32_t DELAY, uint32_t PERIOD){
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	60b9      	str	r1, [r7, #8]
 80016fa:	607a      	str	r2, [r7, #4]
	if(current_index_task < SCH_MAX_TASKS){
 80016fc:	4b25      	ldr	r3, [pc, #148]	; (8001794 <SCH_Add_Task+0xa4>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	2b27      	cmp	r3, #39	; 0x27
 8001702:	d842      	bhi.n	800178a <SCH_Add_Task+0x9a>
		SCH_Tasks_G[current_index_task].pTask = pFuntion;
 8001704:	4b23      	ldr	r3, [pc, #140]	; (8001794 <SCH_Add_Task+0xa4>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	4619      	mov	r1, r3
 800170a:	4a23      	ldr	r2, [pc, #140]	; (8001798 <SCH_Add_Task+0xa8>)
 800170c:	460b      	mov	r3, r1
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	440b      	add	r3, r1
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	4413      	add	r3, r2
 8001716:	68fa      	ldr	r2, [r7, #12]
 8001718:	601a      	str	r2, [r3, #0]
		SCH_Tasks_G[current_index_task].Delay = DELAY;
 800171a:	4b1e      	ldr	r3, [pc, #120]	; (8001794 <SCH_Add_Task+0xa4>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	4619      	mov	r1, r3
 8001720:	4a1d      	ldr	r2, [pc, #116]	; (8001798 <SCH_Add_Task+0xa8>)
 8001722:	460b      	mov	r3, r1
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	440b      	add	r3, r1
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	4413      	add	r3, r2
 800172c:	3304      	adds	r3, #4
 800172e:	68ba      	ldr	r2, [r7, #8]
 8001730:	601a      	str	r2, [r3, #0]
		SCH_Tasks_G[current_index_task].Period = PERIOD;
 8001732:	4b18      	ldr	r3, [pc, #96]	; (8001794 <SCH_Add_Task+0xa4>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	4619      	mov	r1, r3
 8001738:	4a17      	ldr	r2, [pc, #92]	; (8001798 <SCH_Add_Task+0xa8>)
 800173a:	460b      	mov	r3, r1
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	440b      	add	r3, r1
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	4413      	add	r3, r2
 8001744:	3308      	adds	r3, #8
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	601a      	str	r2, [r3, #0]
		SCH_Tasks_G[current_index_task].RunMe = 0;
 800174a:	4b12      	ldr	r3, [pc, #72]	; (8001794 <SCH_Add_Task+0xa4>)
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	4619      	mov	r1, r3
 8001750:	4a11      	ldr	r2, [pc, #68]	; (8001798 <SCH_Add_Task+0xa8>)
 8001752:	460b      	mov	r3, r1
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	440b      	add	r3, r1
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	4413      	add	r3, r2
 800175c:	330c      	adds	r3, #12
 800175e:	2200      	movs	r2, #0
 8001760:	701a      	strb	r2, [r3, #0]

		SCH_Tasks_G[current_index_task].TaskID = current_index_task;
 8001762:	4b0c      	ldr	r3, [pc, #48]	; (8001794 <SCH_Add_Task+0xa4>)
 8001764:	781a      	ldrb	r2, [r3, #0]
 8001766:	4b0b      	ldr	r3, [pc, #44]	; (8001794 <SCH_Add_Task+0xa4>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	4619      	mov	r1, r3
 800176c:	4610      	mov	r0, r2
 800176e:	4a0a      	ldr	r2, [pc, #40]	; (8001798 <SCH_Add_Task+0xa8>)
 8001770:	460b      	mov	r3, r1
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	440b      	add	r3, r1
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	4413      	add	r3, r2
 800177a:	3310      	adds	r3, #16
 800177c:	6018      	str	r0, [r3, #0]
		current_index_task++;
 800177e:	4b05      	ldr	r3, [pc, #20]	; (8001794 <SCH_Add_Task+0xa4>)
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	3301      	adds	r3, #1
 8001784:	b2da      	uxtb	r2, r3
 8001786:	4b03      	ldr	r3, [pc, #12]	; (8001794 <SCH_Add_Task+0xa4>)
 8001788:	701a      	strb	r2, [r3, #0]
	}
}
 800178a:	bf00      	nop
 800178c:	3714      	adds	r7, #20
 800178e:	46bd      	mov	sp, r7
 8001790:	bc80      	pop	{r7}
 8001792:	4770      	bx	lr
 8001794:	200000f4 	.word	0x200000f4
 8001798:	200001a4 	.word	0x200001a4

0800179c <SCH_Update>:

void SCH_Update(void) {
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
	for(int i = 0; i < current_index_task; i++){
 80017a2:	2300      	movs	r3, #0
 80017a4:	607b      	str	r3, [r7, #4]
 80017a6:	e048      	b.n	800183a <SCH_Update+0x9e>
		if (SCH_Tasks_G[i].Delay > 0) {
 80017a8:	492a      	ldr	r1, [pc, #168]	; (8001854 <SCH_Update+0xb8>)
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	4613      	mov	r3, r2
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	4413      	add	r3, r2
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	440b      	add	r3, r1
 80017b6:	3304      	adds	r3, #4
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d013      	beq.n	80017e6 <SCH_Update+0x4a>
			SCH_Tasks_G[i].Delay--;
 80017be:	4925      	ldr	r1, [pc, #148]	; (8001854 <SCH_Update+0xb8>)
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	4613      	mov	r3, r2
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	4413      	add	r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	440b      	add	r3, r1
 80017cc:	3304      	adds	r3, #4
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	1e59      	subs	r1, r3, #1
 80017d2:	4820      	ldr	r0, [pc, #128]	; (8001854 <SCH_Update+0xb8>)
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	4613      	mov	r3, r2
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	4413      	add	r3, r2
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	4403      	add	r3, r0
 80017e0:	3304      	adds	r3, #4
 80017e2:	6019      	str	r1, [r3, #0]
 80017e4:	e026      	b.n	8001834 <SCH_Update+0x98>
		} else {
			SCH_Tasks_G[i].Delay = SCH_Tasks_G[i].Period;
 80017e6:	491b      	ldr	r1, [pc, #108]	; (8001854 <SCH_Update+0xb8>)
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	4613      	mov	r3, r2
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	4413      	add	r3, r2
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	440b      	add	r3, r1
 80017f4:	3308      	adds	r3, #8
 80017f6:	6819      	ldr	r1, [r3, #0]
 80017f8:	4816      	ldr	r0, [pc, #88]	; (8001854 <SCH_Update+0xb8>)
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	4613      	mov	r3, r2
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	4413      	add	r3, r2
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	4403      	add	r3, r0
 8001806:	3304      	adds	r3, #4
 8001808:	6019      	str	r1, [r3, #0]
			SCH_Tasks_G[i].RunMe += 1;
 800180a:	4912      	ldr	r1, [pc, #72]	; (8001854 <SCH_Update+0xb8>)
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	4613      	mov	r3, r2
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	4413      	add	r3, r2
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	440b      	add	r3, r1
 8001818:	330c      	adds	r3, #12
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	3301      	adds	r3, #1
 800181e:	b2d8      	uxtb	r0, r3
 8001820:	490c      	ldr	r1, [pc, #48]	; (8001854 <SCH_Update+0xb8>)
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	4613      	mov	r3, r2
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	4413      	add	r3, r2
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	440b      	add	r3, r1
 800182e:	330c      	adds	r3, #12
 8001830:	4602      	mov	r2, r0
 8001832:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < current_index_task; i++){
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	3301      	adds	r3, #1
 8001838:	607b      	str	r3, [r7, #4]
 800183a:	4b07      	ldr	r3, [pc, #28]	; (8001858 <SCH_Update+0xbc>)
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	461a      	mov	r2, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	4293      	cmp	r3, r2
 8001844:	dbb0      	blt.n	80017a8 <SCH_Update+0xc>
		}
	}
}
 8001846:	bf00      	nop
 8001848:	bf00      	nop
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	bc80      	pop	{r7}
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	200001a4 	.word	0x200001a4
 8001858:	200000f4 	.word	0x200000f4

0800185c <SCH_Dispath_Tasks>:
void SCH_Dispath_Tasks(void){
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
	if(SCH_Tasks_G[a].RunMe > 0){
 8001860:	4b25      	ldr	r3, [pc, #148]	; (80018f8 <SCH_Dispath_Tasks+0x9c>)
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	4925      	ldr	r1, [pc, #148]	; (80018fc <SCH_Dispath_Tasks+0xa0>)
 8001866:	4613      	mov	r3, r2
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	4413      	add	r3, r2
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	440b      	add	r3, r1
 8001870:	330c      	adds	r3, #12
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d02f      	beq.n	80018d8 <SCH_Dispath_Tasks+0x7c>
		SCH_Tasks_G[a].RunMe--;
 8001878:	4b1f      	ldr	r3, [pc, #124]	; (80018f8 <SCH_Dispath_Tasks+0x9c>)
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	491f      	ldr	r1, [pc, #124]	; (80018fc <SCH_Dispath_Tasks+0xa0>)
 800187e:	4613      	mov	r3, r2
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	4413      	add	r3, r2
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	440b      	add	r3, r1
 8001888:	330c      	adds	r3, #12
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	3b01      	subs	r3, #1
 800188e:	b2d8      	uxtb	r0, r3
 8001890:	491a      	ldr	r1, [pc, #104]	; (80018fc <SCH_Dispath_Tasks+0xa0>)
 8001892:	4613      	mov	r3, r2
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	4413      	add	r3, r2
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	440b      	add	r3, r1
 800189c:	330c      	adds	r3, #12
 800189e:	4602      	mov	r2, r0
 80018a0:	701a      	strb	r2, [r3, #0]
		(*SCH_Tasks_G[a].pTask)();
 80018a2:	4b15      	ldr	r3, [pc, #84]	; (80018f8 <SCH_Dispath_Tasks+0x9c>)
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	4915      	ldr	r1, [pc, #84]	; (80018fc <SCH_Dispath_Tasks+0xa0>)
 80018a8:	4613      	mov	r3, r2
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	4413      	add	r3, r2
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	440b      	add	r3, r1
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4798      	blx	r3
		if( SCH_Tasks_G[a].Period == 0){
 80018b6:	4b10      	ldr	r3, [pc, #64]	; (80018f8 <SCH_Dispath_Tasks+0x9c>)
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	4910      	ldr	r1, [pc, #64]	; (80018fc <SCH_Dispath_Tasks+0xa0>)
 80018bc:	4613      	mov	r3, r2
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	4413      	add	r3, r2
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	440b      	add	r3, r1
 80018c6:	3308      	adds	r3, #8
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d104      	bne.n	80018d8 <SCH_Dispath_Tasks+0x7c>
			SCH_Delete_Task(a) ;
 80018ce:	4b0a      	ldr	r3, [pc, #40]	; (80018f8 <SCH_Dispath_Tasks+0x9c>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f000 f816 	bl	8001904 <SCH_Delete_Task>
		}
	}
	a = (a + 1) % current_index_task;
 80018d8:	4b07      	ldr	r3, [pc, #28]	; (80018f8 <SCH_Dispath_Tasks+0x9c>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	3301      	adds	r3, #1
 80018de:	4a08      	ldr	r2, [pc, #32]	; (8001900 <SCH_Dispath_Tasks+0xa4>)
 80018e0:	7812      	ldrb	r2, [r2, #0]
 80018e2:	fb93 f1f2 	sdiv	r1, r3, r2
 80018e6:	fb02 f201 	mul.w	r2, r2, r1
 80018ea:	1a9b      	subs	r3, r3, r2
 80018ec:	4a02      	ldr	r2, [pc, #8]	; (80018f8 <SCH_Dispath_Tasks+0x9c>)
 80018ee:	6013      	str	r3, [r2, #0]
	SCH_Report_Status();
 80018f0:	f000 f860 	bl	80019b4 <SCH_Report_Status>
}
 80018f4:	bf00      	nop
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	200000f8 	.word	0x200000f8
 80018fc:	200001a4 	.word	0x200001a4
 8001900:	200000f4 	.word	0x200000f4

08001904 <SCH_Delete_Task>:

uint8_t SCH_Delete_Task(uint32_t Task_ID){
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
	unsigned char Return_code;
	if( SCH_Tasks_G[Task_ID].pTask == 0) {
 800190c:	4923      	ldr	r1, [pc, #140]	; (800199c <SCH_Delete_Task+0x98>)
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	4613      	mov	r3, r2
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	4413      	add	r3, r2
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	440b      	add	r3, r1
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d107      	bne.n	8001930 <SCH_Delete_Task+0x2c>
		Error_code_G = ERROR_SCH_CANNOT_DELETE_TASK;
 8001920:	4b1f      	ldr	r3, [pc, #124]	; (80019a0 <SCH_Delete_Task+0x9c>)
 8001922:	781a      	ldrb	r2, [r3, #0]
 8001924:	4b1f      	ldr	r3, [pc, #124]	; (80019a4 <SCH_Delete_Task+0xa0>)
 8001926:	701a      	strb	r2, [r3, #0]
		Return_code = RETURN_ERROR;
 8001928:	4b1f      	ldr	r3, [pc, #124]	; (80019a8 <SCH_Delete_Task+0xa4>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	73fb      	strb	r3, [r7, #15]
 800192e:	e002      	b.n	8001936 <SCH_Delete_Task+0x32>
	} else {
		Return_code = RETURN_NORMAL;
 8001930:	4b1e      	ldr	r3, [pc, #120]	; (80019ac <SCH_Delete_Task+0xa8>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	73fb      	strb	r3, [r7, #15]
	}
	SCH_Tasks_G[Task_ID].pTask = 0x0000 ;
 8001936:	4919      	ldr	r1, [pc, #100]	; (800199c <SCH_Delete_Task+0x98>)
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	4613      	mov	r3, r2
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	4413      	add	r3, r2
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	440b      	add	r3, r1
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]
	SCH_Tasks_G[Task_ID].Delay = 0;
 8001948:	4914      	ldr	r1, [pc, #80]	; (800199c <SCH_Delete_Task+0x98>)
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	4613      	mov	r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	4413      	add	r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	440b      	add	r3, r1
 8001956:	3304      	adds	r3, #4
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
	SCH_Tasks_G[Task_ID].Period = 0;
 800195c:	490f      	ldr	r1, [pc, #60]	; (800199c <SCH_Delete_Task+0x98>)
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	4613      	mov	r3, r2
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	4413      	add	r3, r2
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	440b      	add	r3, r1
 800196a:	3308      	adds	r3, #8
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
	SCH_Tasks_G[Task_ID].RunMe = 0;
 8001970:	490a      	ldr	r1, [pc, #40]	; (800199c <SCH_Delete_Task+0x98>)
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	4613      	mov	r3, r2
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	4413      	add	r3, r2
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	440b      	add	r3, r1
 800197e:	330c      	adds	r3, #12
 8001980:	2200      	movs	r2, #0
 8001982:	701a      	strb	r2, [r3, #0]
	current_index_task--;
 8001984:	4b0a      	ldr	r3, [pc, #40]	; (80019b0 <SCH_Delete_Task+0xac>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	3b01      	subs	r3, #1
 800198a:	b2da      	uxtb	r2, r3
 800198c:	4b08      	ldr	r3, [pc, #32]	; (80019b0 <SCH_Delete_Task+0xac>)
 800198e:	701a      	strb	r2, [r3, #0]
	return Return_code ;
 8001990:	7bfb      	ldrb	r3, [r7, #15]
}
 8001992:	4618      	mov	r0, r3
 8001994:	3714      	adds	r7, #20
 8001996:	46bd      	mov	sp, r7
 8001998:	bc80      	pop	{r7}
 800199a:	4770      	bx	lr
 800199c:	200001a4 	.word	0x200001a4
 80019a0:	2000014e 	.word	0x2000014e
 80019a4:	200000f5 	.word	0x200000f5
 80019a8:	2000014c 	.word	0x2000014c
 80019ac:	2000014f 	.word	0x2000014f
 80019b0:	200000f4 	.word	0x200000f4

080019b4 <SCH_Report_Status>:

void SCH_Report_Status( void ) {
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
				Error_code_G = 0;
			}
		}
	}
	#endif
}
 80019b8:	bf00      	nop
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bc80      	pop	{r7}
 80019be:	4770      	bx	lr

080019c0 <timer_run>:
void setTimer(int i, int duration){
	timer_flag[i] = 0;
	timer_counter[i] = duration ;
}

void timer_run(int i){
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
	if(timer_counter[i] > 0){
 80019c8:	4a0f      	ldr	r2, [pc, #60]	; (8001a08 <timer_run+0x48>)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	dd13      	ble.n	80019fc <timer_run+0x3c>
		timer_counter[i]--;
 80019d4:	4a0c      	ldr	r2, [pc, #48]	; (8001a08 <timer_run+0x48>)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019dc:	1e5a      	subs	r2, r3, #1
 80019de:	490a      	ldr	r1, [pc, #40]	; (8001a08 <timer_run+0x48>)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(timer_counter[i] <= 0) timer_flag[i] = 1;
 80019e6:	4a08      	ldr	r2, [pc, #32]	; (8001a08 <timer_run+0x48>)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	dc04      	bgt.n	80019fc <timer_run+0x3c>
 80019f2:	4a06      	ldr	r2, [pc, #24]	; (8001a0c <timer_run+0x4c>)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2101      	movs	r1, #1
 80019f8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
}
 80019fc:	bf00      	nop
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bc80      	pop	{r7}
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	200000fc 	.word	0x200000fc
 8001a0c:	20000124 	.word	0x20000124

08001a10 <timerRun>:

void timerRun(){
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
	timer_run(0);
 8001a14:	2000      	movs	r0, #0
 8001a16:	f7ff ffd3 	bl	80019c0 <timer_run>
	timer_run(1);
 8001a1a:	2001      	movs	r0, #1
 8001a1c:	f7ff ffd0 	bl	80019c0 <timer_run>
	timer_run(2);
 8001a20:	2002      	movs	r0, #2
 8001a22:	f7ff ffcd 	bl	80019c0 <timer_run>
	timer_run(3);
 8001a26:	2003      	movs	r0, #3
 8001a28:	f7ff ffca 	bl	80019c0 <timer_run>
	timer_run(4);
 8001a2c:	2004      	movs	r0, #4
 8001a2e:	f7ff ffc7 	bl	80019c0 <timer_run>
	timer_run(5);
 8001a32:	2005      	movs	r0, #5
 8001a34:	f7ff ffc4 	bl	80019c0 <timer_run>
	timer_run(6);
 8001a38:	2006      	movs	r0, #6
 8001a3a:	f7ff ffc1 	bl	80019c0 <timer_run>
	timer_run(7);
 8001a3e:	2007      	movs	r0, #7
 8001a40:	f7ff ffbe 	bl	80019c0 <timer_run>
	timer_run(8);
 8001a44:	2008      	movs	r0, #8
 8001a46:	f7ff ffbb 	bl	80019c0 <timer_run>
	timer_run(9);
 8001a4a:	2009      	movs	r0, #9
 8001a4c:	f7ff ffb8 	bl	80019c0 <timer_run>
}
 8001a50:	bf00      	nop
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b085      	sub	sp, #20
 8001a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a5a:	4b15      	ldr	r3, [pc, #84]	; (8001ab0 <HAL_MspInit+0x5c>)
 8001a5c:	699b      	ldr	r3, [r3, #24]
 8001a5e:	4a14      	ldr	r2, [pc, #80]	; (8001ab0 <HAL_MspInit+0x5c>)
 8001a60:	f043 0301 	orr.w	r3, r3, #1
 8001a64:	6193      	str	r3, [r2, #24]
 8001a66:	4b12      	ldr	r3, [pc, #72]	; (8001ab0 <HAL_MspInit+0x5c>)
 8001a68:	699b      	ldr	r3, [r3, #24]
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	60bb      	str	r3, [r7, #8]
 8001a70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a72:	4b0f      	ldr	r3, [pc, #60]	; (8001ab0 <HAL_MspInit+0x5c>)
 8001a74:	69db      	ldr	r3, [r3, #28]
 8001a76:	4a0e      	ldr	r2, [pc, #56]	; (8001ab0 <HAL_MspInit+0x5c>)
 8001a78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a7c:	61d3      	str	r3, [r2, #28]
 8001a7e:	4b0c      	ldr	r3, [pc, #48]	; (8001ab0 <HAL_MspInit+0x5c>)
 8001a80:	69db      	ldr	r3, [r3, #28]
 8001a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a86:	607b      	str	r3, [r7, #4]
 8001a88:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001a8a:	4b0a      	ldr	r3, [pc, #40]	; (8001ab4 <HAL_MspInit+0x60>)
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	60fb      	str	r3, [r7, #12]
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001a96:	60fb      	str	r3, [r7, #12]
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001a9e:	60fb      	str	r3, [r7, #12]
 8001aa0:	4a04      	ldr	r2, [pc, #16]	; (8001ab4 <HAL_MspInit+0x60>)
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aa6:	bf00      	nop
 8001aa8:	3714      	adds	r7, #20
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bc80      	pop	{r7}
 8001aae:	4770      	bx	lr
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	40010000 	.word	0x40010000

08001ab8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ac8:	d113      	bne.n	8001af2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001aca:	4b0c      	ldr	r3, [pc, #48]	; (8001afc <HAL_TIM_Base_MspInit+0x44>)
 8001acc:	69db      	ldr	r3, [r3, #28]
 8001ace:	4a0b      	ldr	r2, [pc, #44]	; (8001afc <HAL_TIM_Base_MspInit+0x44>)
 8001ad0:	f043 0301 	orr.w	r3, r3, #1
 8001ad4:	61d3      	str	r3, [r2, #28]
 8001ad6:	4b09      	ldr	r3, [pc, #36]	; (8001afc <HAL_TIM_Base_MspInit+0x44>)
 8001ad8:	69db      	ldr	r3, [r3, #28]
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	60fb      	str	r3, [r7, #12]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	201c      	movs	r0, #28
 8001ae8:	f000 f9a1 	bl	8001e2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001aec:	201c      	movs	r0, #28
 8001aee:	f000 f9ba 	bl	8001e66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001af2:	bf00      	nop
 8001af4:	3710      	adds	r7, #16
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40021000 	.word	0x40021000

08001b00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b04:	e7fe      	b.n	8001b04 <NMI_Handler+0x4>

08001b06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b06:	b480      	push	{r7}
 8001b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b0a:	e7fe      	b.n	8001b0a <HardFault_Handler+0x4>

08001b0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b10:	e7fe      	b.n	8001b10 <MemManage_Handler+0x4>

08001b12 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b12:	b480      	push	{r7}
 8001b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b16:	e7fe      	b.n	8001b16 <BusFault_Handler+0x4>

08001b18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b1c:	e7fe      	b.n	8001b1c <UsageFault_Handler+0x4>

08001b1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b22:	bf00      	nop
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bc80      	pop	{r7}
 8001b28:	4770      	bx	lr

08001b2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b2e:	bf00      	nop
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bc80      	pop	{r7}
 8001b34:	4770      	bx	lr

08001b36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b36:	b480      	push	{r7}
 8001b38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b3a:	bf00      	nop
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bc80      	pop	{r7}
 8001b40:	4770      	bx	lr

08001b42 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b46:	f000 f87f 	bl	8001c48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b4a:	bf00      	nop
 8001b4c:	bd80      	pop	{r7, pc}
	...

08001b50 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b54:	4802      	ldr	r0, [pc, #8]	; (8001b60 <TIM2_IRQHandler+0x10>)
 8001b56:	f000 ffdb 	bl	8002b10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b5a:	bf00      	nop
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	2000015c 	.word	0x2000015c

08001b64 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b68:	bf00      	nop
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bc80      	pop	{r7}
 8001b6e:	4770      	bx	lr

08001b70 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b70:	f7ff fff8 	bl	8001b64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b74:	480b      	ldr	r0, [pc, #44]	; (8001ba4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001b76:	490c      	ldr	r1, [pc, #48]	; (8001ba8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001b78:	4a0c      	ldr	r2, [pc, #48]	; (8001bac <LoopFillZerobss+0x16>)
  movs r3, #0
 8001b7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b7c:	e002      	b.n	8001b84 <LoopCopyDataInit>

08001b7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b82:	3304      	adds	r3, #4

08001b84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b88:	d3f9      	bcc.n	8001b7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b8a:	4a09      	ldr	r2, [pc, #36]	; (8001bb0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001b8c:	4c09      	ldr	r4, [pc, #36]	; (8001bb4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b90:	e001      	b.n	8001b96 <LoopFillZerobss>

08001b92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b94:	3204      	adds	r2, #4

08001b96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b98:	d3fb      	bcc.n	8001b92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b9a:	f001 faf9 	bl	8003190 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b9e:	f7ff fc81 	bl	80014a4 <main>
  bx lr
 8001ba2:	4770      	bx	lr
  ldr r0, =_sdata
 8001ba4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ba8:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8001bac:	0800322c 	.word	0x0800322c
  ldr r2, =_sbss
 8001bb0:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 8001bb4:	200004c8 	.word	0x200004c8

08001bb8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001bb8:	e7fe      	b.n	8001bb8 <ADC1_2_IRQHandler>
	...

08001bbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bc0:	4b08      	ldr	r3, [pc, #32]	; (8001be4 <HAL_Init+0x28>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a07      	ldr	r2, [pc, #28]	; (8001be4 <HAL_Init+0x28>)
 8001bc6:	f043 0310 	orr.w	r3, r3, #16
 8001bca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bcc:	2003      	movs	r0, #3
 8001bce:	f000 f923 	bl	8001e18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bd2:	200f      	movs	r0, #15
 8001bd4:	f000 f808 	bl	8001be8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bd8:	f7ff ff3c 	bl	8001a54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	40022000 	.word	0x40022000

08001be8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bf0:	4b12      	ldr	r3, [pc, #72]	; (8001c3c <HAL_InitTick+0x54>)
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	4b12      	ldr	r3, [pc, #72]	; (8001c40 <HAL_InitTick+0x58>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c06:	4618      	mov	r0, r3
 8001c08:	f000 f93b 	bl	8001e82 <HAL_SYSTICK_Config>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e00e      	b.n	8001c34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2b0f      	cmp	r3, #15
 8001c1a:	d80a      	bhi.n	8001c32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	6879      	ldr	r1, [r7, #4]
 8001c20:	f04f 30ff 	mov.w	r0, #4294967295
 8001c24:	f000 f903 	bl	8001e2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c28:	4a06      	ldr	r2, [pc, #24]	; (8001c44 <HAL_InitTick+0x5c>)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	e000      	b.n	8001c34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	20000098 	.word	0x20000098
 8001c40:	200000a0 	.word	0x200000a0
 8001c44:	2000009c 	.word	0x2000009c

08001c48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c4c:	4b05      	ldr	r3, [pc, #20]	; (8001c64 <HAL_IncTick+0x1c>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	461a      	mov	r2, r3
 8001c52:	4b05      	ldr	r3, [pc, #20]	; (8001c68 <HAL_IncTick+0x20>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4413      	add	r3, r2
 8001c58:	4a03      	ldr	r2, [pc, #12]	; (8001c68 <HAL_IncTick+0x20>)
 8001c5a:	6013      	str	r3, [r2, #0]
}
 8001c5c:	bf00      	nop
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bc80      	pop	{r7}
 8001c62:	4770      	bx	lr
 8001c64:	200000a0 	.word	0x200000a0
 8001c68:	200004c4 	.word	0x200004c4

08001c6c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c70:	4b02      	ldr	r3, [pc, #8]	; (8001c7c <HAL_GetTick+0x10>)
 8001c72:	681b      	ldr	r3, [r3, #0]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bc80      	pop	{r7}
 8001c7a:	4770      	bx	lr
 8001c7c:	200004c4 	.word	0x200004c4

08001c80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f003 0307 	and.w	r3, r3, #7
 8001c8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c90:	4b0c      	ldr	r3, [pc, #48]	; (8001cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c96:	68ba      	ldr	r2, [r7, #8]
 8001c98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ca8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cb2:	4a04      	ldr	r2, [pc, #16]	; (8001cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	60d3      	str	r3, [r2, #12]
}
 8001cb8:	bf00      	nop
 8001cba:	3714      	adds	r7, #20
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bc80      	pop	{r7}
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	e000ed00 	.word	0xe000ed00

08001cc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ccc:	4b04      	ldr	r3, [pc, #16]	; (8001ce0 <__NVIC_GetPriorityGrouping+0x18>)
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	0a1b      	lsrs	r3, r3, #8
 8001cd2:	f003 0307 	and.w	r3, r3, #7
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bc80      	pop	{r7}
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	e000ed00 	.word	0xe000ed00

08001ce4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	4603      	mov	r3, r0
 8001cec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	db0b      	blt.n	8001d0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cf6:	79fb      	ldrb	r3, [r7, #7]
 8001cf8:	f003 021f 	and.w	r2, r3, #31
 8001cfc:	4906      	ldr	r1, [pc, #24]	; (8001d18 <__NVIC_EnableIRQ+0x34>)
 8001cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d02:	095b      	lsrs	r3, r3, #5
 8001d04:	2001      	movs	r0, #1
 8001d06:	fa00 f202 	lsl.w	r2, r0, r2
 8001d0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d0e:	bf00      	nop
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bc80      	pop	{r7}
 8001d16:	4770      	bx	lr
 8001d18:	e000e100 	.word	0xe000e100

08001d1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	4603      	mov	r3, r0
 8001d24:	6039      	str	r1, [r7, #0]
 8001d26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	db0a      	blt.n	8001d46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	b2da      	uxtb	r2, r3
 8001d34:	490c      	ldr	r1, [pc, #48]	; (8001d68 <__NVIC_SetPriority+0x4c>)
 8001d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3a:	0112      	lsls	r2, r2, #4
 8001d3c:	b2d2      	uxtb	r2, r2
 8001d3e:	440b      	add	r3, r1
 8001d40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d44:	e00a      	b.n	8001d5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	b2da      	uxtb	r2, r3
 8001d4a:	4908      	ldr	r1, [pc, #32]	; (8001d6c <__NVIC_SetPriority+0x50>)
 8001d4c:	79fb      	ldrb	r3, [r7, #7]
 8001d4e:	f003 030f 	and.w	r3, r3, #15
 8001d52:	3b04      	subs	r3, #4
 8001d54:	0112      	lsls	r2, r2, #4
 8001d56:	b2d2      	uxtb	r2, r2
 8001d58:	440b      	add	r3, r1
 8001d5a:	761a      	strb	r2, [r3, #24]
}
 8001d5c:	bf00      	nop
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bc80      	pop	{r7}
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	e000e100 	.word	0xe000e100
 8001d6c:	e000ed00 	.word	0xe000ed00

08001d70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b089      	sub	sp, #36	; 0x24
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	60b9      	str	r1, [r7, #8]
 8001d7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f003 0307 	and.w	r3, r3, #7
 8001d82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	f1c3 0307 	rsb	r3, r3, #7
 8001d8a:	2b04      	cmp	r3, #4
 8001d8c:	bf28      	it	cs
 8001d8e:	2304      	movcs	r3, #4
 8001d90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	3304      	adds	r3, #4
 8001d96:	2b06      	cmp	r3, #6
 8001d98:	d902      	bls.n	8001da0 <NVIC_EncodePriority+0x30>
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	3b03      	subs	r3, #3
 8001d9e:	e000      	b.n	8001da2 <NVIC_EncodePriority+0x32>
 8001da0:	2300      	movs	r3, #0
 8001da2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da4:	f04f 32ff 	mov.w	r2, #4294967295
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	43da      	mvns	r2, r3
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	401a      	ands	r2, r3
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001db8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc2:	43d9      	mvns	r1, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc8:	4313      	orrs	r3, r2
         );
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3724      	adds	r7, #36	; 0x24
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bc80      	pop	{r7}
 8001dd2:	4770      	bx	lr

08001dd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	3b01      	subs	r3, #1
 8001de0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001de4:	d301      	bcc.n	8001dea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001de6:	2301      	movs	r3, #1
 8001de8:	e00f      	b.n	8001e0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dea:	4a0a      	ldr	r2, [pc, #40]	; (8001e14 <SysTick_Config+0x40>)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	3b01      	subs	r3, #1
 8001df0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001df2:	210f      	movs	r1, #15
 8001df4:	f04f 30ff 	mov.w	r0, #4294967295
 8001df8:	f7ff ff90 	bl	8001d1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dfc:	4b05      	ldr	r3, [pc, #20]	; (8001e14 <SysTick_Config+0x40>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e02:	4b04      	ldr	r3, [pc, #16]	; (8001e14 <SysTick_Config+0x40>)
 8001e04:	2207      	movs	r2, #7
 8001e06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	e000e010 	.word	0xe000e010

08001e18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f7ff ff2d 	bl	8001c80 <__NVIC_SetPriorityGrouping>
}
 8001e26:	bf00      	nop
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b086      	sub	sp, #24
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	4603      	mov	r3, r0
 8001e36:	60b9      	str	r1, [r7, #8]
 8001e38:	607a      	str	r2, [r7, #4]
 8001e3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e40:	f7ff ff42 	bl	8001cc8 <__NVIC_GetPriorityGrouping>
 8001e44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	68b9      	ldr	r1, [r7, #8]
 8001e4a:	6978      	ldr	r0, [r7, #20]
 8001e4c:	f7ff ff90 	bl	8001d70 <NVIC_EncodePriority>
 8001e50:	4602      	mov	r2, r0
 8001e52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e56:	4611      	mov	r1, r2
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7ff ff5f 	bl	8001d1c <__NVIC_SetPriority>
}
 8001e5e:	bf00      	nop
 8001e60:	3718      	adds	r7, #24
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b082      	sub	sp, #8
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff ff35 	bl	8001ce4 <__NVIC_EnableIRQ>
}
 8001e7a:	bf00      	nop
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b082      	sub	sp, #8
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f7ff ffa2 	bl	8001dd4 <SysTick_Config>
 8001e90:	4603      	mov	r3, r0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
	...

08001e9c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b08b      	sub	sp, #44	; 0x2c
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eae:	e148      	b.n	8002142 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	69fa      	ldr	r2, [r7, #28]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	f040 8137 	bne.w	800213c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	4aa3      	ldr	r2, [pc, #652]	; (8002160 <HAL_GPIO_Init+0x2c4>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d05e      	beq.n	8001f96 <HAL_GPIO_Init+0xfa>
 8001ed8:	4aa1      	ldr	r2, [pc, #644]	; (8002160 <HAL_GPIO_Init+0x2c4>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d875      	bhi.n	8001fca <HAL_GPIO_Init+0x12e>
 8001ede:	4aa1      	ldr	r2, [pc, #644]	; (8002164 <HAL_GPIO_Init+0x2c8>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d058      	beq.n	8001f96 <HAL_GPIO_Init+0xfa>
 8001ee4:	4a9f      	ldr	r2, [pc, #636]	; (8002164 <HAL_GPIO_Init+0x2c8>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d86f      	bhi.n	8001fca <HAL_GPIO_Init+0x12e>
 8001eea:	4a9f      	ldr	r2, [pc, #636]	; (8002168 <HAL_GPIO_Init+0x2cc>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d052      	beq.n	8001f96 <HAL_GPIO_Init+0xfa>
 8001ef0:	4a9d      	ldr	r2, [pc, #628]	; (8002168 <HAL_GPIO_Init+0x2cc>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d869      	bhi.n	8001fca <HAL_GPIO_Init+0x12e>
 8001ef6:	4a9d      	ldr	r2, [pc, #628]	; (800216c <HAL_GPIO_Init+0x2d0>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d04c      	beq.n	8001f96 <HAL_GPIO_Init+0xfa>
 8001efc:	4a9b      	ldr	r2, [pc, #620]	; (800216c <HAL_GPIO_Init+0x2d0>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d863      	bhi.n	8001fca <HAL_GPIO_Init+0x12e>
 8001f02:	4a9b      	ldr	r2, [pc, #620]	; (8002170 <HAL_GPIO_Init+0x2d4>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d046      	beq.n	8001f96 <HAL_GPIO_Init+0xfa>
 8001f08:	4a99      	ldr	r2, [pc, #612]	; (8002170 <HAL_GPIO_Init+0x2d4>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d85d      	bhi.n	8001fca <HAL_GPIO_Init+0x12e>
 8001f0e:	2b12      	cmp	r3, #18
 8001f10:	d82a      	bhi.n	8001f68 <HAL_GPIO_Init+0xcc>
 8001f12:	2b12      	cmp	r3, #18
 8001f14:	d859      	bhi.n	8001fca <HAL_GPIO_Init+0x12e>
 8001f16:	a201      	add	r2, pc, #4	; (adr r2, 8001f1c <HAL_GPIO_Init+0x80>)
 8001f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f1c:	08001f97 	.word	0x08001f97
 8001f20:	08001f71 	.word	0x08001f71
 8001f24:	08001f83 	.word	0x08001f83
 8001f28:	08001fc5 	.word	0x08001fc5
 8001f2c:	08001fcb 	.word	0x08001fcb
 8001f30:	08001fcb 	.word	0x08001fcb
 8001f34:	08001fcb 	.word	0x08001fcb
 8001f38:	08001fcb 	.word	0x08001fcb
 8001f3c:	08001fcb 	.word	0x08001fcb
 8001f40:	08001fcb 	.word	0x08001fcb
 8001f44:	08001fcb 	.word	0x08001fcb
 8001f48:	08001fcb 	.word	0x08001fcb
 8001f4c:	08001fcb 	.word	0x08001fcb
 8001f50:	08001fcb 	.word	0x08001fcb
 8001f54:	08001fcb 	.word	0x08001fcb
 8001f58:	08001fcb 	.word	0x08001fcb
 8001f5c:	08001fcb 	.word	0x08001fcb
 8001f60:	08001f79 	.word	0x08001f79
 8001f64:	08001f8d 	.word	0x08001f8d
 8001f68:	4a82      	ldr	r2, [pc, #520]	; (8002174 <HAL_GPIO_Init+0x2d8>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d013      	beq.n	8001f96 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f6e:	e02c      	b.n	8001fca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	623b      	str	r3, [r7, #32]
          break;
 8001f76:	e029      	b.n	8001fcc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	3304      	adds	r3, #4
 8001f7e:	623b      	str	r3, [r7, #32]
          break;
 8001f80:	e024      	b.n	8001fcc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	3308      	adds	r3, #8
 8001f88:	623b      	str	r3, [r7, #32]
          break;
 8001f8a:	e01f      	b.n	8001fcc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	330c      	adds	r3, #12
 8001f92:	623b      	str	r3, [r7, #32]
          break;
 8001f94:	e01a      	b.n	8001fcc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d102      	bne.n	8001fa4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f9e:	2304      	movs	r3, #4
 8001fa0:	623b      	str	r3, [r7, #32]
          break;
 8001fa2:	e013      	b.n	8001fcc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d105      	bne.n	8001fb8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fac:	2308      	movs	r3, #8
 8001fae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	69fa      	ldr	r2, [r7, #28]
 8001fb4:	611a      	str	r2, [r3, #16]
          break;
 8001fb6:	e009      	b.n	8001fcc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fb8:	2308      	movs	r3, #8
 8001fba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	69fa      	ldr	r2, [r7, #28]
 8001fc0:	615a      	str	r2, [r3, #20]
          break;
 8001fc2:	e003      	b.n	8001fcc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	623b      	str	r3, [r7, #32]
          break;
 8001fc8:	e000      	b.n	8001fcc <HAL_GPIO_Init+0x130>
          break;
 8001fca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	2bff      	cmp	r3, #255	; 0xff
 8001fd0:	d801      	bhi.n	8001fd6 <HAL_GPIO_Init+0x13a>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	e001      	b.n	8001fda <HAL_GPIO_Init+0x13e>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	3304      	adds	r3, #4
 8001fda:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	2bff      	cmp	r3, #255	; 0xff
 8001fe0:	d802      	bhi.n	8001fe8 <HAL_GPIO_Init+0x14c>
 8001fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	e002      	b.n	8001fee <HAL_GPIO_Init+0x152>
 8001fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fea:	3b08      	subs	r3, #8
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	210f      	movs	r1, #15
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	401a      	ands	r2, r3
 8002000:	6a39      	ldr	r1, [r7, #32]
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	fa01 f303 	lsl.w	r3, r1, r3
 8002008:	431a      	orrs	r2, r3
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002016:	2b00      	cmp	r3, #0
 8002018:	f000 8090 	beq.w	800213c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800201c:	4b56      	ldr	r3, [pc, #344]	; (8002178 <HAL_GPIO_Init+0x2dc>)
 800201e:	699b      	ldr	r3, [r3, #24]
 8002020:	4a55      	ldr	r2, [pc, #340]	; (8002178 <HAL_GPIO_Init+0x2dc>)
 8002022:	f043 0301 	orr.w	r3, r3, #1
 8002026:	6193      	str	r3, [r2, #24]
 8002028:	4b53      	ldr	r3, [pc, #332]	; (8002178 <HAL_GPIO_Init+0x2dc>)
 800202a:	699b      	ldr	r3, [r3, #24]
 800202c:	f003 0301 	and.w	r3, r3, #1
 8002030:	60bb      	str	r3, [r7, #8]
 8002032:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002034:	4a51      	ldr	r2, [pc, #324]	; (800217c <HAL_GPIO_Init+0x2e0>)
 8002036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002038:	089b      	lsrs	r3, r3, #2
 800203a:	3302      	adds	r3, #2
 800203c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002040:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002044:	f003 0303 	and.w	r3, r3, #3
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	220f      	movs	r2, #15
 800204c:	fa02 f303 	lsl.w	r3, r2, r3
 8002050:	43db      	mvns	r3, r3
 8002052:	68fa      	ldr	r2, [r7, #12]
 8002054:	4013      	ands	r3, r2
 8002056:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4a49      	ldr	r2, [pc, #292]	; (8002180 <HAL_GPIO_Init+0x2e4>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d00d      	beq.n	800207c <HAL_GPIO_Init+0x1e0>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4a48      	ldr	r2, [pc, #288]	; (8002184 <HAL_GPIO_Init+0x2e8>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d007      	beq.n	8002078 <HAL_GPIO_Init+0x1dc>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4a47      	ldr	r2, [pc, #284]	; (8002188 <HAL_GPIO_Init+0x2ec>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d101      	bne.n	8002074 <HAL_GPIO_Init+0x1d8>
 8002070:	2302      	movs	r3, #2
 8002072:	e004      	b.n	800207e <HAL_GPIO_Init+0x1e2>
 8002074:	2303      	movs	r3, #3
 8002076:	e002      	b.n	800207e <HAL_GPIO_Init+0x1e2>
 8002078:	2301      	movs	r3, #1
 800207a:	e000      	b.n	800207e <HAL_GPIO_Init+0x1e2>
 800207c:	2300      	movs	r3, #0
 800207e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002080:	f002 0203 	and.w	r2, r2, #3
 8002084:	0092      	lsls	r2, r2, #2
 8002086:	4093      	lsls	r3, r2
 8002088:	68fa      	ldr	r2, [r7, #12]
 800208a:	4313      	orrs	r3, r2
 800208c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800208e:	493b      	ldr	r1, [pc, #236]	; (800217c <HAL_GPIO_Init+0x2e0>)
 8002090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002092:	089b      	lsrs	r3, r3, #2
 8002094:	3302      	adds	r3, #2
 8002096:	68fa      	ldr	r2, [r7, #12]
 8002098:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d006      	beq.n	80020b6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80020a8:	4b38      	ldr	r3, [pc, #224]	; (800218c <HAL_GPIO_Init+0x2f0>)
 80020aa:	689a      	ldr	r2, [r3, #8]
 80020ac:	4937      	ldr	r1, [pc, #220]	; (800218c <HAL_GPIO_Init+0x2f0>)
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	608b      	str	r3, [r1, #8]
 80020b4:	e006      	b.n	80020c4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020b6:	4b35      	ldr	r3, [pc, #212]	; (800218c <HAL_GPIO_Init+0x2f0>)
 80020b8:	689a      	ldr	r2, [r3, #8]
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	43db      	mvns	r3, r3
 80020be:	4933      	ldr	r1, [pc, #204]	; (800218c <HAL_GPIO_Init+0x2f0>)
 80020c0:	4013      	ands	r3, r2
 80020c2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d006      	beq.n	80020de <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80020d0:	4b2e      	ldr	r3, [pc, #184]	; (800218c <HAL_GPIO_Init+0x2f0>)
 80020d2:	68da      	ldr	r2, [r3, #12]
 80020d4:	492d      	ldr	r1, [pc, #180]	; (800218c <HAL_GPIO_Init+0x2f0>)
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	4313      	orrs	r3, r2
 80020da:	60cb      	str	r3, [r1, #12]
 80020dc:	e006      	b.n	80020ec <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80020de:	4b2b      	ldr	r3, [pc, #172]	; (800218c <HAL_GPIO_Init+0x2f0>)
 80020e0:	68da      	ldr	r2, [r3, #12]
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	43db      	mvns	r3, r3
 80020e6:	4929      	ldr	r1, [pc, #164]	; (800218c <HAL_GPIO_Init+0x2f0>)
 80020e8:	4013      	ands	r3, r2
 80020ea:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d006      	beq.n	8002106 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020f8:	4b24      	ldr	r3, [pc, #144]	; (800218c <HAL_GPIO_Init+0x2f0>)
 80020fa:	685a      	ldr	r2, [r3, #4]
 80020fc:	4923      	ldr	r1, [pc, #140]	; (800218c <HAL_GPIO_Init+0x2f0>)
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	4313      	orrs	r3, r2
 8002102:	604b      	str	r3, [r1, #4]
 8002104:	e006      	b.n	8002114 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002106:	4b21      	ldr	r3, [pc, #132]	; (800218c <HAL_GPIO_Init+0x2f0>)
 8002108:	685a      	ldr	r2, [r3, #4]
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	43db      	mvns	r3, r3
 800210e:	491f      	ldr	r1, [pc, #124]	; (800218c <HAL_GPIO_Init+0x2f0>)
 8002110:	4013      	ands	r3, r2
 8002112:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d006      	beq.n	800212e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002120:	4b1a      	ldr	r3, [pc, #104]	; (800218c <HAL_GPIO_Init+0x2f0>)
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	4919      	ldr	r1, [pc, #100]	; (800218c <HAL_GPIO_Init+0x2f0>)
 8002126:	69bb      	ldr	r3, [r7, #24]
 8002128:	4313      	orrs	r3, r2
 800212a:	600b      	str	r3, [r1, #0]
 800212c:	e006      	b.n	800213c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800212e:	4b17      	ldr	r3, [pc, #92]	; (800218c <HAL_GPIO_Init+0x2f0>)
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	43db      	mvns	r3, r3
 8002136:	4915      	ldr	r1, [pc, #84]	; (800218c <HAL_GPIO_Init+0x2f0>)
 8002138:	4013      	ands	r3, r2
 800213a:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800213c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213e:	3301      	adds	r3, #1
 8002140:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002148:	fa22 f303 	lsr.w	r3, r2, r3
 800214c:	2b00      	cmp	r3, #0
 800214e:	f47f aeaf 	bne.w	8001eb0 <HAL_GPIO_Init+0x14>
  }
}
 8002152:	bf00      	nop
 8002154:	bf00      	nop
 8002156:	372c      	adds	r7, #44	; 0x2c
 8002158:	46bd      	mov	sp, r7
 800215a:	bc80      	pop	{r7}
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	10320000 	.word	0x10320000
 8002164:	10310000 	.word	0x10310000
 8002168:	10220000 	.word	0x10220000
 800216c:	10210000 	.word	0x10210000
 8002170:	10120000 	.word	0x10120000
 8002174:	10110000 	.word	0x10110000
 8002178:	40021000 	.word	0x40021000
 800217c:	40010000 	.word	0x40010000
 8002180:	40010800 	.word	0x40010800
 8002184:	40010c00 	.word	0x40010c00
 8002188:	40011000 	.word	0x40011000
 800218c:	40010400 	.word	0x40010400

08002190 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002190:	b480      	push	{r7}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	460b      	mov	r3, r1
 800219a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	689a      	ldr	r2, [r3, #8]
 80021a0:	887b      	ldrh	r3, [r7, #2]
 80021a2:	4013      	ands	r3, r2
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d002      	beq.n	80021ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021a8:	2301      	movs	r3, #1
 80021aa:	73fb      	strb	r3, [r7, #15]
 80021ac:	e001      	b.n	80021b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021ae:	2300      	movs	r3, #0
 80021b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3714      	adds	r7, #20
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bc80      	pop	{r7}
 80021bc:	4770      	bx	lr

080021be <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021be:	b480      	push	{r7}
 80021c0:	b083      	sub	sp, #12
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
 80021c6:	460b      	mov	r3, r1
 80021c8:	807b      	strh	r3, [r7, #2]
 80021ca:	4613      	mov	r3, r2
 80021cc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021ce:	787b      	ldrb	r3, [r7, #1]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d003      	beq.n	80021dc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021d4:	887a      	ldrh	r2, [r7, #2]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80021da:	e003      	b.n	80021e4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021dc:	887b      	ldrh	r3, [r7, #2]
 80021de:	041a      	lsls	r2, r3, #16
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	611a      	str	r2, [r3, #16]
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bc80      	pop	{r7}
 80021ec:	4770      	bx	lr

080021ee <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021ee:	b480      	push	{r7}
 80021f0:	b085      	sub	sp, #20
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
 80021f6:	460b      	mov	r3, r1
 80021f8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002200:	887a      	ldrh	r2, [r7, #2]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	4013      	ands	r3, r2
 8002206:	041a      	lsls	r2, r3, #16
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	43d9      	mvns	r1, r3
 800220c:	887b      	ldrh	r3, [r7, #2]
 800220e:	400b      	ands	r3, r1
 8002210:	431a      	orrs	r2, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	611a      	str	r2, [r3, #16]
}
 8002216:	bf00      	nop
 8002218:	3714      	adds	r7, #20
 800221a:	46bd      	mov	sp, r7
 800221c:	bc80      	pop	{r7}
 800221e:	4770      	bx	lr

08002220 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d101      	bne.n	8002232 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e26c      	b.n	800270c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	2b00      	cmp	r3, #0
 800223c:	f000 8087 	beq.w	800234e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002240:	4b92      	ldr	r3, [pc, #584]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f003 030c 	and.w	r3, r3, #12
 8002248:	2b04      	cmp	r3, #4
 800224a:	d00c      	beq.n	8002266 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800224c:	4b8f      	ldr	r3, [pc, #572]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f003 030c 	and.w	r3, r3, #12
 8002254:	2b08      	cmp	r3, #8
 8002256:	d112      	bne.n	800227e <HAL_RCC_OscConfig+0x5e>
 8002258:	4b8c      	ldr	r3, [pc, #560]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002264:	d10b      	bne.n	800227e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002266:	4b89      	ldr	r3, [pc, #548]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d06c      	beq.n	800234c <HAL_RCC_OscConfig+0x12c>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d168      	bne.n	800234c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e246      	b.n	800270c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002286:	d106      	bne.n	8002296 <HAL_RCC_OscConfig+0x76>
 8002288:	4b80      	ldr	r3, [pc, #512]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a7f      	ldr	r2, [pc, #508]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 800228e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002292:	6013      	str	r3, [r2, #0]
 8002294:	e02e      	b.n	80022f4 <HAL_RCC_OscConfig+0xd4>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d10c      	bne.n	80022b8 <HAL_RCC_OscConfig+0x98>
 800229e:	4b7b      	ldr	r3, [pc, #492]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a7a      	ldr	r2, [pc, #488]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 80022a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022a8:	6013      	str	r3, [r2, #0]
 80022aa:	4b78      	ldr	r3, [pc, #480]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a77      	ldr	r2, [pc, #476]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 80022b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022b4:	6013      	str	r3, [r2, #0]
 80022b6:	e01d      	b.n	80022f4 <HAL_RCC_OscConfig+0xd4>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022c0:	d10c      	bne.n	80022dc <HAL_RCC_OscConfig+0xbc>
 80022c2:	4b72      	ldr	r3, [pc, #456]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a71      	ldr	r2, [pc, #452]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 80022c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022cc:	6013      	str	r3, [r2, #0]
 80022ce:	4b6f      	ldr	r3, [pc, #444]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a6e      	ldr	r2, [pc, #440]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 80022d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022d8:	6013      	str	r3, [r2, #0]
 80022da:	e00b      	b.n	80022f4 <HAL_RCC_OscConfig+0xd4>
 80022dc:	4b6b      	ldr	r3, [pc, #428]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a6a      	ldr	r2, [pc, #424]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 80022e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022e6:	6013      	str	r3, [r2, #0]
 80022e8:	4b68      	ldr	r3, [pc, #416]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a67      	ldr	r2, [pc, #412]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 80022ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022f2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d013      	beq.n	8002324 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022fc:	f7ff fcb6 	bl	8001c6c <HAL_GetTick>
 8002300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002302:	e008      	b.n	8002316 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002304:	f7ff fcb2 	bl	8001c6c <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b64      	cmp	r3, #100	; 0x64
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e1fa      	b.n	800270c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002316:	4b5d      	ldr	r3, [pc, #372]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d0f0      	beq.n	8002304 <HAL_RCC_OscConfig+0xe4>
 8002322:	e014      	b.n	800234e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002324:	f7ff fca2 	bl	8001c6c <HAL_GetTick>
 8002328:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800232a:	e008      	b.n	800233e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800232c:	f7ff fc9e 	bl	8001c6c <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b64      	cmp	r3, #100	; 0x64
 8002338:	d901      	bls.n	800233e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e1e6      	b.n	800270c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800233e:	4b53      	ldr	r3, [pc, #332]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d1f0      	bne.n	800232c <HAL_RCC_OscConfig+0x10c>
 800234a:	e000      	b.n	800234e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800234c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	2b00      	cmp	r3, #0
 8002358:	d063      	beq.n	8002422 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800235a:	4b4c      	ldr	r3, [pc, #304]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f003 030c 	and.w	r3, r3, #12
 8002362:	2b00      	cmp	r3, #0
 8002364:	d00b      	beq.n	800237e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002366:	4b49      	ldr	r3, [pc, #292]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f003 030c 	and.w	r3, r3, #12
 800236e:	2b08      	cmp	r3, #8
 8002370:	d11c      	bne.n	80023ac <HAL_RCC_OscConfig+0x18c>
 8002372:	4b46      	ldr	r3, [pc, #280]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d116      	bne.n	80023ac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800237e:	4b43      	ldr	r3, [pc, #268]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	2b00      	cmp	r3, #0
 8002388:	d005      	beq.n	8002396 <HAL_RCC_OscConfig+0x176>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	2b01      	cmp	r3, #1
 8002390:	d001      	beq.n	8002396 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e1ba      	b.n	800270c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002396:	4b3d      	ldr	r3, [pc, #244]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	695b      	ldr	r3, [r3, #20]
 80023a2:	00db      	lsls	r3, r3, #3
 80023a4:	4939      	ldr	r1, [pc, #228]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023aa:	e03a      	b.n	8002422 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	691b      	ldr	r3, [r3, #16]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d020      	beq.n	80023f6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023b4:	4b36      	ldr	r3, [pc, #216]	; (8002490 <HAL_RCC_OscConfig+0x270>)
 80023b6:	2201      	movs	r2, #1
 80023b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ba:	f7ff fc57 	bl	8001c6c <HAL_GetTick>
 80023be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023c0:	e008      	b.n	80023d4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023c2:	f7ff fc53 	bl	8001c6c <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d901      	bls.n	80023d4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e19b      	b.n	800270c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023d4:	4b2d      	ldr	r3, [pc, #180]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0302 	and.w	r3, r3, #2
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d0f0      	beq.n	80023c2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023e0:	4b2a      	ldr	r3, [pc, #168]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	695b      	ldr	r3, [r3, #20]
 80023ec:	00db      	lsls	r3, r3, #3
 80023ee:	4927      	ldr	r1, [pc, #156]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	600b      	str	r3, [r1, #0]
 80023f4:	e015      	b.n	8002422 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023f6:	4b26      	ldr	r3, [pc, #152]	; (8002490 <HAL_RCC_OscConfig+0x270>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023fc:	f7ff fc36 	bl	8001c6c <HAL_GetTick>
 8002400:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002402:	e008      	b.n	8002416 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002404:	f7ff fc32 	bl	8001c6c <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b02      	cmp	r3, #2
 8002410:	d901      	bls.n	8002416 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e17a      	b.n	800270c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002416:	4b1d      	ldr	r3, [pc, #116]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0302 	and.w	r3, r3, #2
 800241e:	2b00      	cmp	r3, #0
 8002420:	d1f0      	bne.n	8002404 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0308 	and.w	r3, r3, #8
 800242a:	2b00      	cmp	r3, #0
 800242c:	d03a      	beq.n	80024a4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	699b      	ldr	r3, [r3, #24]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d019      	beq.n	800246a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002436:	4b17      	ldr	r3, [pc, #92]	; (8002494 <HAL_RCC_OscConfig+0x274>)
 8002438:	2201      	movs	r2, #1
 800243a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800243c:	f7ff fc16 	bl	8001c6c <HAL_GetTick>
 8002440:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002442:	e008      	b.n	8002456 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002444:	f7ff fc12 	bl	8001c6c <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b02      	cmp	r3, #2
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e15a      	b.n	800270c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002456:	4b0d      	ldr	r3, [pc, #52]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 8002458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	2b00      	cmp	r3, #0
 8002460:	d0f0      	beq.n	8002444 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002462:	2001      	movs	r0, #1
 8002464:	f000 fa9a 	bl	800299c <RCC_Delay>
 8002468:	e01c      	b.n	80024a4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800246a:	4b0a      	ldr	r3, [pc, #40]	; (8002494 <HAL_RCC_OscConfig+0x274>)
 800246c:	2200      	movs	r2, #0
 800246e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002470:	f7ff fbfc 	bl	8001c6c <HAL_GetTick>
 8002474:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002476:	e00f      	b.n	8002498 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002478:	f7ff fbf8 	bl	8001c6c <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b02      	cmp	r3, #2
 8002484:	d908      	bls.n	8002498 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e140      	b.n	800270c <HAL_RCC_OscConfig+0x4ec>
 800248a:	bf00      	nop
 800248c:	40021000 	.word	0x40021000
 8002490:	42420000 	.word	0x42420000
 8002494:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002498:	4b9e      	ldr	r3, [pc, #632]	; (8002714 <HAL_RCC_OscConfig+0x4f4>)
 800249a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249c:	f003 0302 	and.w	r3, r3, #2
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d1e9      	bne.n	8002478 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0304 	and.w	r3, r3, #4
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	f000 80a6 	beq.w	80025fe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024b2:	2300      	movs	r3, #0
 80024b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024b6:	4b97      	ldr	r3, [pc, #604]	; (8002714 <HAL_RCC_OscConfig+0x4f4>)
 80024b8:	69db      	ldr	r3, [r3, #28]
 80024ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d10d      	bne.n	80024de <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024c2:	4b94      	ldr	r3, [pc, #592]	; (8002714 <HAL_RCC_OscConfig+0x4f4>)
 80024c4:	69db      	ldr	r3, [r3, #28]
 80024c6:	4a93      	ldr	r2, [pc, #588]	; (8002714 <HAL_RCC_OscConfig+0x4f4>)
 80024c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024cc:	61d3      	str	r3, [r2, #28]
 80024ce:	4b91      	ldr	r3, [pc, #580]	; (8002714 <HAL_RCC_OscConfig+0x4f4>)
 80024d0:	69db      	ldr	r3, [r3, #28]
 80024d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d6:	60bb      	str	r3, [r7, #8]
 80024d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024da:	2301      	movs	r3, #1
 80024dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024de:	4b8e      	ldr	r3, [pc, #568]	; (8002718 <HAL_RCC_OscConfig+0x4f8>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d118      	bne.n	800251c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024ea:	4b8b      	ldr	r3, [pc, #556]	; (8002718 <HAL_RCC_OscConfig+0x4f8>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a8a      	ldr	r2, [pc, #552]	; (8002718 <HAL_RCC_OscConfig+0x4f8>)
 80024f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024f6:	f7ff fbb9 	bl	8001c6c <HAL_GetTick>
 80024fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024fc:	e008      	b.n	8002510 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024fe:	f7ff fbb5 	bl	8001c6c <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	2b64      	cmp	r3, #100	; 0x64
 800250a:	d901      	bls.n	8002510 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e0fd      	b.n	800270c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002510:	4b81      	ldr	r3, [pc, #516]	; (8002718 <HAL_RCC_OscConfig+0x4f8>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002518:	2b00      	cmp	r3, #0
 800251a:	d0f0      	beq.n	80024fe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	2b01      	cmp	r3, #1
 8002522:	d106      	bne.n	8002532 <HAL_RCC_OscConfig+0x312>
 8002524:	4b7b      	ldr	r3, [pc, #492]	; (8002714 <HAL_RCC_OscConfig+0x4f4>)
 8002526:	6a1b      	ldr	r3, [r3, #32]
 8002528:	4a7a      	ldr	r2, [pc, #488]	; (8002714 <HAL_RCC_OscConfig+0x4f4>)
 800252a:	f043 0301 	orr.w	r3, r3, #1
 800252e:	6213      	str	r3, [r2, #32]
 8002530:	e02d      	b.n	800258e <HAL_RCC_OscConfig+0x36e>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d10c      	bne.n	8002554 <HAL_RCC_OscConfig+0x334>
 800253a:	4b76      	ldr	r3, [pc, #472]	; (8002714 <HAL_RCC_OscConfig+0x4f4>)
 800253c:	6a1b      	ldr	r3, [r3, #32]
 800253e:	4a75      	ldr	r2, [pc, #468]	; (8002714 <HAL_RCC_OscConfig+0x4f4>)
 8002540:	f023 0301 	bic.w	r3, r3, #1
 8002544:	6213      	str	r3, [r2, #32]
 8002546:	4b73      	ldr	r3, [pc, #460]	; (8002714 <HAL_RCC_OscConfig+0x4f4>)
 8002548:	6a1b      	ldr	r3, [r3, #32]
 800254a:	4a72      	ldr	r2, [pc, #456]	; (8002714 <HAL_RCC_OscConfig+0x4f4>)
 800254c:	f023 0304 	bic.w	r3, r3, #4
 8002550:	6213      	str	r3, [r2, #32]
 8002552:	e01c      	b.n	800258e <HAL_RCC_OscConfig+0x36e>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	2b05      	cmp	r3, #5
 800255a:	d10c      	bne.n	8002576 <HAL_RCC_OscConfig+0x356>
 800255c:	4b6d      	ldr	r3, [pc, #436]	; (8002714 <HAL_RCC_OscConfig+0x4f4>)
 800255e:	6a1b      	ldr	r3, [r3, #32]
 8002560:	4a6c      	ldr	r2, [pc, #432]	; (8002714 <HAL_RCC_OscConfig+0x4f4>)
 8002562:	f043 0304 	orr.w	r3, r3, #4
 8002566:	6213      	str	r3, [r2, #32]
 8002568:	4b6a      	ldr	r3, [pc, #424]	; (8002714 <HAL_RCC_OscConfig+0x4f4>)
 800256a:	6a1b      	ldr	r3, [r3, #32]
 800256c:	4a69      	ldr	r2, [pc, #420]	; (8002714 <HAL_RCC_OscConfig+0x4f4>)
 800256e:	f043 0301 	orr.w	r3, r3, #1
 8002572:	6213      	str	r3, [r2, #32]
 8002574:	e00b      	b.n	800258e <HAL_RCC_OscConfig+0x36e>
 8002576:	4b67      	ldr	r3, [pc, #412]	; (8002714 <HAL_RCC_OscConfig+0x4f4>)
 8002578:	6a1b      	ldr	r3, [r3, #32]
 800257a:	4a66      	ldr	r2, [pc, #408]	; (8002714 <HAL_RCC_OscConfig+0x4f4>)
 800257c:	f023 0301 	bic.w	r3, r3, #1
 8002580:	6213      	str	r3, [r2, #32]
 8002582:	4b64      	ldr	r3, [pc, #400]	; (8002714 <HAL_RCC_OscConfig+0x4f4>)
 8002584:	6a1b      	ldr	r3, [r3, #32]
 8002586:	4a63      	ldr	r2, [pc, #396]	; (8002714 <HAL_RCC_OscConfig+0x4f4>)
 8002588:	f023 0304 	bic.w	r3, r3, #4
 800258c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d015      	beq.n	80025c2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002596:	f7ff fb69 	bl	8001c6c <HAL_GetTick>
 800259a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800259c:	e00a      	b.n	80025b4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800259e:	f7ff fb65 	bl	8001c6c <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d901      	bls.n	80025b4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e0ab      	b.n	800270c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025b4:	4b57      	ldr	r3, [pc, #348]	; (8002714 <HAL_RCC_OscConfig+0x4f4>)
 80025b6:	6a1b      	ldr	r3, [r3, #32]
 80025b8:	f003 0302 	and.w	r3, r3, #2
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d0ee      	beq.n	800259e <HAL_RCC_OscConfig+0x37e>
 80025c0:	e014      	b.n	80025ec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025c2:	f7ff fb53 	bl	8001c6c <HAL_GetTick>
 80025c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025c8:	e00a      	b.n	80025e0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ca:	f7ff fb4f 	bl	8001c6c <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025d8:	4293      	cmp	r3, r2
 80025da:	d901      	bls.n	80025e0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	e095      	b.n	800270c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025e0:	4b4c      	ldr	r3, [pc, #304]	; (8002714 <HAL_RCC_OscConfig+0x4f4>)
 80025e2:	6a1b      	ldr	r3, [r3, #32]
 80025e4:	f003 0302 	and.w	r3, r3, #2
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d1ee      	bne.n	80025ca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80025ec:	7dfb      	ldrb	r3, [r7, #23]
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d105      	bne.n	80025fe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025f2:	4b48      	ldr	r3, [pc, #288]	; (8002714 <HAL_RCC_OscConfig+0x4f4>)
 80025f4:	69db      	ldr	r3, [r3, #28]
 80025f6:	4a47      	ldr	r2, [pc, #284]	; (8002714 <HAL_RCC_OscConfig+0x4f4>)
 80025f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025fc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	69db      	ldr	r3, [r3, #28]
 8002602:	2b00      	cmp	r3, #0
 8002604:	f000 8081 	beq.w	800270a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002608:	4b42      	ldr	r3, [pc, #264]	; (8002714 <HAL_RCC_OscConfig+0x4f4>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f003 030c 	and.w	r3, r3, #12
 8002610:	2b08      	cmp	r3, #8
 8002612:	d061      	beq.n	80026d8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	69db      	ldr	r3, [r3, #28]
 8002618:	2b02      	cmp	r3, #2
 800261a:	d146      	bne.n	80026aa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800261c:	4b3f      	ldr	r3, [pc, #252]	; (800271c <HAL_RCC_OscConfig+0x4fc>)
 800261e:	2200      	movs	r2, #0
 8002620:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002622:	f7ff fb23 	bl	8001c6c <HAL_GetTick>
 8002626:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002628:	e008      	b.n	800263c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800262a:	f7ff fb1f 	bl	8001c6c <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	2b02      	cmp	r3, #2
 8002636:	d901      	bls.n	800263c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e067      	b.n	800270c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800263c:	4b35      	ldr	r3, [pc, #212]	; (8002714 <HAL_RCC_OscConfig+0x4f4>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d1f0      	bne.n	800262a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a1b      	ldr	r3, [r3, #32]
 800264c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002650:	d108      	bne.n	8002664 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002652:	4b30      	ldr	r3, [pc, #192]	; (8002714 <HAL_RCC_OscConfig+0x4f4>)
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	492d      	ldr	r1, [pc, #180]	; (8002714 <HAL_RCC_OscConfig+0x4f4>)
 8002660:	4313      	orrs	r3, r2
 8002662:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002664:	4b2b      	ldr	r3, [pc, #172]	; (8002714 <HAL_RCC_OscConfig+0x4f4>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6a19      	ldr	r1, [r3, #32]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002674:	430b      	orrs	r3, r1
 8002676:	4927      	ldr	r1, [pc, #156]	; (8002714 <HAL_RCC_OscConfig+0x4f4>)
 8002678:	4313      	orrs	r3, r2
 800267a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800267c:	4b27      	ldr	r3, [pc, #156]	; (800271c <HAL_RCC_OscConfig+0x4fc>)
 800267e:	2201      	movs	r2, #1
 8002680:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002682:	f7ff faf3 	bl	8001c6c <HAL_GetTick>
 8002686:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002688:	e008      	b.n	800269c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800268a:	f7ff faef 	bl	8001c6c <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	2b02      	cmp	r3, #2
 8002696:	d901      	bls.n	800269c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e037      	b.n	800270c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800269c:	4b1d      	ldr	r3, [pc, #116]	; (8002714 <HAL_RCC_OscConfig+0x4f4>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d0f0      	beq.n	800268a <HAL_RCC_OscConfig+0x46a>
 80026a8:	e02f      	b.n	800270a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026aa:	4b1c      	ldr	r3, [pc, #112]	; (800271c <HAL_RCC_OscConfig+0x4fc>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b0:	f7ff fadc 	bl	8001c6c <HAL_GetTick>
 80026b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026b6:	e008      	b.n	80026ca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026b8:	f7ff fad8 	bl	8001c6c <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e020      	b.n	800270c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026ca:	4b12      	ldr	r3, [pc, #72]	; (8002714 <HAL_RCC_OscConfig+0x4f4>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d1f0      	bne.n	80026b8 <HAL_RCC_OscConfig+0x498>
 80026d6:	e018      	b.n	800270a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	69db      	ldr	r3, [r3, #28]
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d101      	bne.n	80026e4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e013      	b.n	800270c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026e4:	4b0b      	ldr	r3, [pc, #44]	; (8002714 <HAL_RCC_OscConfig+0x4f4>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a1b      	ldr	r3, [r3, #32]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d106      	bne.n	8002706 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002702:	429a      	cmp	r2, r3
 8002704:	d001      	beq.n	800270a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e000      	b.n	800270c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800270a:	2300      	movs	r3, #0
}
 800270c:	4618      	mov	r0, r3
 800270e:	3718      	adds	r7, #24
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	40021000 	.word	0x40021000
 8002718:	40007000 	.word	0x40007000
 800271c:	42420060 	.word	0x42420060

08002720 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d101      	bne.n	8002734 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e0d0      	b.n	80028d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002734:	4b6a      	ldr	r3, [pc, #424]	; (80028e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0307 	and.w	r3, r3, #7
 800273c:	683a      	ldr	r2, [r7, #0]
 800273e:	429a      	cmp	r2, r3
 8002740:	d910      	bls.n	8002764 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002742:	4b67      	ldr	r3, [pc, #412]	; (80028e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f023 0207 	bic.w	r2, r3, #7
 800274a:	4965      	ldr	r1, [pc, #404]	; (80028e0 <HAL_RCC_ClockConfig+0x1c0>)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	4313      	orrs	r3, r2
 8002750:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002752:	4b63      	ldr	r3, [pc, #396]	; (80028e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0307 	and.w	r3, r3, #7
 800275a:	683a      	ldr	r2, [r7, #0]
 800275c:	429a      	cmp	r2, r3
 800275e:	d001      	beq.n	8002764 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e0b8      	b.n	80028d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d020      	beq.n	80027b2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0304 	and.w	r3, r3, #4
 8002778:	2b00      	cmp	r3, #0
 800277a:	d005      	beq.n	8002788 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800277c:	4b59      	ldr	r3, [pc, #356]	; (80028e4 <HAL_RCC_ClockConfig+0x1c4>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	4a58      	ldr	r2, [pc, #352]	; (80028e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002782:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002786:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0308 	and.w	r3, r3, #8
 8002790:	2b00      	cmp	r3, #0
 8002792:	d005      	beq.n	80027a0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002794:	4b53      	ldr	r3, [pc, #332]	; (80028e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	4a52      	ldr	r2, [pc, #328]	; (80028e4 <HAL_RCC_ClockConfig+0x1c4>)
 800279a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800279e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027a0:	4b50      	ldr	r3, [pc, #320]	; (80028e4 <HAL_RCC_ClockConfig+0x1c4>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	494d      	ldr	r1, [pc, #308]	; (80028e4 <HAL_RCC_ClockConfig+0x1c4>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d040      	beq.n	8002840 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d107      	bne.n	80027d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027c6:	4b47      	ldr	r3, [pc, #284]	; (80028e4 <HAL_RCC_ClockConfig+0x1c4>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d115      	bne.n	80027fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e07f      	b.n	80028d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d107      	bne.n	80027ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027de:	4b41      	ldr	r3, [pc, #260]	; (80028e4 <HAL_RCC_ClockConfig+0x1c4>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d109      	bne.n	80027fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e073      	b.n	80028d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ee:	4b3d      	ldr	r3, [pc, #244]	; (80028e4 <HAL_RCC_ClockConfig+0x1c4>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e06b      	b.n	80028d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027fe:	4b39      	ldr	r3, [pc, #228]	; (80028e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f023 0203 	bic.w	r2, r3, #3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	4936      	ldr	r1, [pc, #216]	; (80028e4 <HAL_RCC_ClockConfig+0x1c4>)
 800280c:	4313      	orrs	r3, r2
 800280e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002810:	f7ff fa2c 	bl	8001c6c <HAL_GetTick>
 8002814:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002816:	e00a      	b.n	800282e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002818:	f7ff fa28 	bl	8001c6c <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	f241 3288 	movw	r2, #5000	; 0x1388
 8002826:	4293      	cmp	r3, r2
 8002828:	d901      	bls.n	800282e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e053      	b.n	80028d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800282e:	4b2d      	ldr	r3, [pc, #180]	; (80028e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f003 020c 	and.w	r2, r3, #12
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	429a      	cmp	r2, r3
 800283e:	d1eb      	bne.n	8002818 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002840:	4b27      	ldr	r3, [pc, #156]	; (80028e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0307 	and.w	r3, r3, #7
 8002848:	683a      	ldr	r2, [r7, #0]
 800284a:	429a      	cmp	r2, r3
 800284c:	d210      	bcs.n	8002870 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800284e:	4b24      	ldr	r3, [pc, #144]	; (80028e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f023 0207 	bic.w	r2, r3, #7
 8002856:	4922      	ldr	r1, [pc, #136]	; (80028e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	4313      	orrs	r3, r2
 800285c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800285e:	4b20      	ldr	r3, [pc, #128]	; (80028e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0307 	and.w	r3, r3, #7
 8002866:	683a      	ldr	r2, [r7, #0]
 8002868:	429a      	cmp	r2, r3
 800286a:	d001      	beq.n	8002870 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e032      	b.n	80028d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0304 	and.w	r3, r3, #4
 8002878:	2b00      	cmp	r3, #0
 800287a:	d008      	beq.n	800288e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800287c:	4b19      	ldr	r3, [pc, #100]	; (80028e4 <HAL_RCC_ClockConfig+0x1c4>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	4916      	ldr	r1, [pc, #88]	; (80028e4 <HAL_RCC_ClockConfig+0x1c4>)
 800288a:	4313      	orrs	r3, r2
 800288c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0308 	and.w	r3, r3, #8
 8002896:	2b00      	cmp	r3, #0
 8002898:	d009      	beq.n	80028ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800289a:	4b12      	ldr	r3, [pc, #72]	; (80028e4 <HAL_RCC_ClockConfig+0x1c4>)
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	00db      	lsls	r3, r3, #3
 80028a8:	490e      	ldr	r1, [pc, #56]	; (80028e4 <HAL_RCC_ClockConfig+0x1c4>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028ae:	f000 f821 	bl	80028f4 <HAL_RCC_GetSysClockFreq>
 80028b2:	4602      	mov	r2, r0
 80028b4:	4b0b      	ldr	r3, [pc, #44]	; (80028e4 <HAL_RCC_ClockConfig+0x1c4>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	091b      	lsrs	r3, r3, #4
 80028ba:	f003 030f 	and.w	r3, r3, #15
 80028be:	490a      	ldr	r1, [pc, #40]	; (80028e8 <HAL_RCC_ClockConfig+0x1c8>)
 80028c0:	5ccb      	ldrb	r3, [r1, r3]
 80028c2:	fa22 f303 	lsr.w	r3, r2, r3
 80028c6:	4a09      	ldr	r2, [pc, #36]	; (80028ec <HAL_RCC_ClockConfig+0x1cc>)
 80028c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028ca:	4b09      	ldr	r3, [pc, #36]	; (80028f0 <HAL_RCC_ClockConfig+0x1d0>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7ff f98a 	bl	8001be8 <HAL_InitTick>

  return HAL_OK;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	40022000 	.word	0x40022000
 80028e4:	40021000 	.word	0x40021000
 80028e8:	08003200 	.word	0x08003200
 80028ec:	20000098 	.word	0x20000098
 80028f0:	2000009c 	.word	0x2000009c

080028f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b087      	sub	sp, #28
 80028f8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028fa:	2300      	movs	r3, #0
 80028fc:	60fb      	str	r3, [r7, #12]
 80028fe:	2300      	movs	r3, #0
 8002900:	60bb      	str	r3, [r7, #8]
 8002902:	2300      	movs	r3, #0
 8002904:	617b      	str	r3, [r7, #20]
 8002906:	2300      	movs	r3, #0
 8002908:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800290a:	2300      	movs	r3, #0
 800290c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800290e:	4b1e      	ldr	r3, [pc, #120]	; (8002988 <HAL_RCC_GetSysClockFreq+0x94>)
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f003 030c 	and.w	r3, r3, #12
 800291a:	2b04      	cmp	r3, #4
 800291c:	d002      	beq.n	8002924 <HAL_RCC_GetSysClockFreq+0x30>
 800291e:	2b08      	cmp	r3, #8
 8002920:	d003      	beq.n	800292a <HAL_RCC_GetSysClockFreq+0x36>
 8002922:	e027      	b.n	8002974 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002924:	4b19      	ldr	r3, [pc, #100]	; (800298c <HAL_RCC_GetSysClockFreq+0x98>)
 8002926:	613b      	str	r3, [r7, #16]
      break;
 8002928:	e027      	b.n	800297a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	0c9b      	lsrs	r3, r3, #18
 800292e:	f003 030f 	and.w	r3, r3, #15
 8002932:	4a17      	ldr	r2, [pc, #92]	; (8002990 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002934:	5cd3      	ldrb	r3, [r2, r3]
 8002936:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d010      	beq.n	8002964 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002942:	4b11      	ldr	r3, [pc, #68]	; (8002988 <HAL_RCC_GetSysClockFreq+0x94>)
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	0c5b      	lsrs	r3, r3, #17
 8002948:	f003 0301 	and.w	r3, r3, #1
 800294c:	4a11      	ldr	r2, [pc, #68]	; (8002994 <HAL_RCC_GetSysClockFreq+0xa0>)
 800294e:	5cd3      	ldrb	r3, [r2, r3]
 8002950:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a0d      	ldr	r2, [pc, #52]	; (800298c <HAL_RCC_GetSysClockFreq+0x98>)
 8002956:	fb02 f203 	mul.w	r2, r2, r3
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002960:	617b      	str	r3, [r7, #20]
 8002962:	e004      	b.n	800296e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	4a0c      	ldr	r2, [pc, #48]	; (8002998 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002968:	fb02 f303 	mul.w	r3, r2, r3
 800296c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	613b      	str	r3, [r7, #16]
      break;
 8002972:	e002      	b.n	800297a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002974:	4b05      	ldr	r3, [pc, #20]	; (800298c <HAL_RCC_GetSysClockFreq+0x98>)
 8002976:	613b      	str	r3, [r7, #16]
      break;
 8002978:	bf00      	nop
    }
  }
  return sysclockfreq;
 800297a:	693b      	ldr	r3, [r7, #16]
}
 800297c:	4618      	mov	r0, r3
 800297e:	371c      	adds	r7, #28
 8002980:	46bd      	mov	sp, r7
 8002982:	bc80      	pop	{r7}
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	40021000 	.word	0x40021000
 800298c:	007a1200 	.word	0x007a1200
 8002990:	08003210 	.word	0x08003210
 8002994:	08003220 	.word	0x08003220
 8002998:	003d0900 	.word	0x003d0900

0800299c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800299c:	b480      	push	{r7}
 800299e:	b085      	sub	sp, #20
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80029a4:	4b0a      	ldr	r3, [pc, #40]	; (80029d0 <RCC_Delay+0x34>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a0a      	ldr	r2, [pc, #40]	; (80029d4 <RCC_Delay+0x38>)
 80029aa:	fba2 2303 	umull	r2, r3, r2, r3
 80029ae:	0a5b      	lsrs	r3, r3, #9
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	fb02 f303 	mul.w	r3, r2, r3
 80029b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80029b8:	bf00      	nop
  }
  while (Delay --);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	1e5a      	subs	r2, r3, #1
 80029be:	60fa      	str	r2, [r7, #12]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d1f9      	bne.n	80029b8 <RCC_Delay+0x1c>
}
 80029c4:	bf00      	nop
 80029c6:	bf00      	nop
 80029c8:	3714      	adds	r7, #20
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bc80      	pop	{r7}
 80029ce:	4770      	bx	lr
 80029d0:	20000098 	.word	0x20000098
 80029d4:	10624dd3 	.word	0x10624dd3

080029d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d101      	bne.n	80029ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e041      	b.n	8002a6e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d106      	bne.n	8002a04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f7ff f85a 	bl	8001ab8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2202      	movs	r2, #2
 8002a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	3304      	adds	r3, #4
 8002a14:	4619      	mov	r1, r3
 8002a16:	4610      	mov	r0, r2
 8002a18:	f000 fa56 	bl	8002ec8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3708      	adds	r7, #8
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
	...

08002a78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b085      	sub	sp, #20
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d001      	beq.n	8002a90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e035      	b.n	8002afc <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2202      	movs	r2, #2
 8002a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	68da      	ldr	r2, [r3, #12]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f042 0201 	orr.w	r2, r2, #1
 8002aa6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a16      	ldr	r2, [pc, #88]	; (8002b08 <HAL_TIM_Base_Start_IT+0x90>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d009      	beq.n	8002ac6 <HAL_TIM_Base_Start_IT+0x4e>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aba:	d004      	beq.n	8002ac6 <HAL_TIM_Base_Start_IT+0x4e>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a12      	ldr	r2, [pc, #72]	; (8002b0c <HAL_TIM_Base_Start_IT+0x94>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d111      	bne.n	8002aea <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f003 0307 	and.w	r3, r3, #7
 8002ad0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2b06      	cmp	r3, #6
 8002ad6:	d010      	beq.n	8002afa <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f042 0201 	orr.w	r2, r2, #1
 8002ae6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ae8:	e007      	b.n	8002afa <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f042 0201 	orr.w	r2, r2, #1
 8002af8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002afa:	2300      	movs	r3, #0
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3714      	adds	r7, #20
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bc80      	pop	{r7}
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	40012c00 	.word	0x40012c00
 8002b0c:	40000400 	.word	0x40000400

08002b10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d020      	beq.n	8002b74 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f003 0302 	and.w	r3, r3, #2
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d01b      	beq.n	8002b74 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f06f 0202 	mvn.w	r2, #2
 8002b44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2201      	movs	r2, #1
 8002b4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	f003 0303 	and.w	r3, r3, #3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d003      	beq.n	8002b62 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f000 f998 	bl	8002e90 <HAL_TIM_IC_CaptureCallback>
 8002b60:	e005      	b.n	8002b6e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f000 f98b 	bl	8002e7e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f000 f99a 	bl	8002ea2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	f003 0304 	and.w	r3, r3, #4
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d020      	beq.n	8002bc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	f003 0304 	and.w	r3, r3, #4
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d01b      	beq.n	8002bc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f06f 0204 	mvn.w	r2, #4
 8002b90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2202      	movs	r2, #2
 8002b96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	699b      	ldr	r3, [r3, #24]
 8002b9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d003      	beq.n	8002bae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f000 f972 	bl	8002e90 <HAL_TIM_IC_CaptureCallback>
 8002bac:	e005      	b.n	8002bba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f000 f965 	bl	8002e7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f000 f974 	bl	8002ea2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	f003 0308 	and.w	r3, r3, #8
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d020      	beq.n	8002c0c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	f003 0308 	and.w	r3, r3, #8
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d01b      	beq.n	8002c0c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f06f 0208 	mvn.w	r2, #8
 8002bdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2204      	movs	r2, #4
 8002be2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	69db      	ldr	r3, [r3, #28]
 8002bea:	f003 0303 	and.w	r3, r3, #3
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d003      	beq.n	8002bfa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f000 f94c 	bl	8002e90 <HAL_TIM_IC_CaptureCallback>
 8002bf8:	e005      	b.n	8002c06 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 f93f 	bl	8002e7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f000 f94e 	bl	8002ea2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	f003 0310 	and.w	r3, r3, #16
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d020      	beq.n	8002c58 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	f003 0310 	and.w	r3, r3, #16
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d01b      	beq.n	8002c58 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f06f 0210 	mvn.w	r2, #16
 8002c28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2208      	movs	r2, #8
 8002c2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	69db      	ldr	r3, [r3, #28]
 8002c36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d003      	beq.n	8002c46 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f000 f926 	bl	8002e90 <HAL_TIM_IC_CaptureCallback>
 8002c44:	e005      	b.n	8002c52 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 f919 	bl	8002e7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f000 f928 	bl	8002ea2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	f003 0301 	and.w	r3, r3, #1
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d00c      	beq.n	8002c7c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f003 0301 	and.w	r3, r3, #1
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d007      	beq.n	8002c7c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f06f 0201 	mvn.w	r2, #1
 8002c74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f7fe fd26 	bl	80016c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d00c      	beq.n	8002ca0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d007      	beq.n	8002ca0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f000 fa6f 	bl	800317e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00c      	beq.n	8002cc4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d007      	beq.n	8002cc4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002cbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f000 f8f8 	bl	8002eb4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	f003 0320 	and.w	r3, r3, #32
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d00c      	beq.n	8002ce8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f003 0320 	and.w	r3, r3, #32
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d007      	beq.n	8002ce8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f06f 0220 	mvn.w	r2, #32
 8002ce0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 fa42 	bl	800316c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ce8:	bf00      	nop
 8002cea:	3710      	adds	r7, #16
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d101      	bne.n	8002d0c <HAL_TIM_ConfigClockSource+0x1c>
 8002d08:	2302      	movs	r3, #2
 8002d0a:	e0b4      	b.n	8002e76 <HAL_TIM_ConfigClockSource+0x186>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2202      	movs	r2, #2
 8002d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002d2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d32:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	68ba      	ldr	r2, [r7, #8]
 8002d3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d44:	d03e      	beq.n	8002dc4 <HAL_TIM_ConfigClockSource+0xd4>
 8002d46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d4a:	f200 8087 	bhi.w	8002e5c <HAL_TIM_ConfigClockSource+0x16c>
 8002d4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d52:	f000 8086 	beq.w	8002e62 <HAL_TIM_ConfigClockSource+0x172>
 8002d56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d5a:	d87f      	bhi.n	8002e5c <HAL_TIM_ConfigClockSource+0x16c>
 8002d5c:	2b70      	cmp	r3, #112	; 0x70
 8002d5e:	d01a      	beq.n	8002d96 <HAL_TIM_ConfigClockSource+0xa6>
 8002d60:	2b70      	cmp	r3, #112	; 0x70
 8002d62:	d87b      	bhi.n	8002e5c <HAL_TIM_ConfigClockSource+0x16c>
 8002d64:	2b60      	cmp	r3, #96	; 0x60
 8002d66:	d050      	beq.n	8002e0a <HAL_TIM_ConfigClockSource+0x11a>
 8002d68:	2b60      	cmp	r3, #96	; 0x60
 8002d6a:	d877      	bhi.n	8002e5c <HAL_TIM_ConfigClockSource+0x16c>
 8002d6c:	2b50      	cmp	r3, #80	; 0x50
 8002d6e:	d03c      	beq.n	8002dea <HAL_TIM_ConfigClockSource+0xfa>
 8002d70:	2b50      	cmp	r3, #80	; 0x50
 8002d72:	d873      	bhi.n	8002e5c <HAL_TIM_ConfigClockSource+0x16c>
 8002d74:	2b40      	cmp	r3, #64	; 0x40
 8002d76:	d058      	beq.n	8002e2a <HAL_TIM_ConfigClockSource+0x13a>
 8002d78:	2b40      	cmp	r3, #64	; 0x40
 8002d7a:	d86f      	bhi.n	8002e5c <HAL_TIM_ConfigClockSource+0x16c>
 8002d7c:	2b30      	cmp	r3, #48	; 0x30
 8002d7e:	d064      	beq.n	8002e4a <HAL_TIM_ConfigClockSource+0x15a>
 8002d80:	2b30      	cmp	r3, #48	; 0x30
 8002d82:	d86b      	bhi.n	8002e5c <HAL_TIM_ConfigClockSource+0x16c>
 8002d84:	2b20      	cmp	r3, #32
 8002d86:	d060      	beq.n	8002e4a <HAL_TIM_ConfigClockSource+0x15a>
 8002d88:	2b20      	cmp	r3, #32
 8002d8a:	d867      	bhi.n	8002e5c <HAL_TIM_ConfigClockSource+0x16c>
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d05c      	beq.n	8002e4a <HAL_TIM_ConfigClockSource+0x15a>
 8002d90:	2b10      	cmp	r3, #16
 8002d92:	d05a      	beq.n	8002e4a <HAL_TIM_ConfigClockSource+0x15a>
 8002d94:	e062      	b.n	8002e5c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6818      	ldr	r0, [r3, #0]
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	6899      	ldr	r1, [r3, #8]
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	685a      	ldr	r2, [r3, #4]
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	f000 f96a 	bl	800307e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002db8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	68ba      	ldr	r2, [r7, #8]
 8002dc0:	609a      	str	r2, [r3, #8]
      break;
 8002dc2:	e04f      	b.n	8002e64 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6818      	ldr	r0, [r3, #0]
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	6899      	ldr	r1, [r3, #8]
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685a      	ldr	r2, [r3, #4]
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	f000 f953 	bl	800307e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	689a      	ldr	r2, [r3, #8]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002de6:	609a      	str	r2, [r3, #8]
      break;
 8002de8:	e03c      	b.n	8002e64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6818      	ldr	r0, [r3, #0]
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	6859      	ldr	r1, [r3, #4]
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	461a      	mov	r2, r3
 8002df8:	f000 f8ca 	bl	8002f90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2150      	movs	r1, #80	; 0x50
 8002e02:	4618      	mov	r0, r3
 8002e04:	f000 f921 	bl	800304a <TIM_ITRx_SetConfig>
      break;
 8002e08:	e02c      	b.n	8002e64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6818      	ldr	r0, [r3, #0]
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	6859      	ldr	r1, [r3, #4]
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	461a      	mov	r2, r3
 8002e18:	f000 f8e8 	bl	8002fec <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2160      	movs	r1, #96	; 0x60
 8002e22:	4618      	mov	r0, r3
 8002e24:	f000 f911 	bl	800304a <TIM_ITRx_SetConfig>
      break;
 8002e28:	e01c      	b.n	8002e64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6818      	ldr	r0, [r3, #0]
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	6859      	ldr	r1, [r3, #4]
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	461a      	mov	r2, r3
 8002e38:	f000 f8aa 	bl	8002f90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2140      	movs	r1, #64	; 0x40
 8002e42:	4618      	mov	r0, r3
 8002e44:	f000 f901 	bl	800304a <TIM_ITRx_SetConfig>
      break;
 8002e48:	e00c      	b.n	8002e64 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4619      	mov	r1, r3
 8002e54:	4610      	mov	r0, r2
 8002e56:	f000 f8f8 	bl	800304a <TIM_ITRx_SetConfig>
      break;
 8002e5a:	e003      	b.n	8002e64 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	73fb      	strb	r3, [r7, #15]
      break;
 8002e60:	e000      	b.n	8002e64 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002e62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3710      	adds	r7, #16
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e7e:	b480      	push	{r7}
 8002e80:	b083      	sub	sp, #12
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e86:	bf00      	nop
 8002e88:	370c      	adds	r7, #12
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bc80      	pop	{r7}
 8002e8e:	4770      	bx	lr

08002e90 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e98:	bf00      	nop
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bc80      	pop	{r7}
 8002ea0:	4770      	bx	lr

08002ea2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ea2:	b480      	push	{r7}
 8002ea4:	b083      	sub	sp, #12
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002eaa:	bf00      	nop
 8002eac:	370c      	adds	r7, #12
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bc80      	pop	{r7}
 8002eb2:	4770      	bx	lr

08002eb4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ebc:	bf00      	nop
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bc80      	pop	{r7}
 8002ec4:	4770      	bx	lr
	...

08002ec8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b085      	sub	sp, #20
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4a2b      	ldr	r2, [pc, #172]	; (8002f88 <TIM_Base_SetConfig+0xc0>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d007      	beq.n	8002ef0 <TIM_Base_SetConfig+0x28>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ee6:	d003      	beq.n	8002ef0 <TIM_Base_SetConfig+0x28>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	4a28      	ldr	r2, [pc, #160]	; (8002f8c <TIM_Base_SetConfig+0xc4>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d108      	bne.n	8002f02 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ef6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	68fa      	ldr	r2, [r7, #12]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a20      	ldr	r2, [pc, #128]	; (8002f88 <TIM_Base_SetConfig+0xc0>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d007      	beq.n	8002f1a <TIM_Base_SetConfig+0x52>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f10:	d003      	beq.n	8002f1a <TIM_Base_SetConfig+0x52>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a1d      	ldr	r2, [pc, #116]	; (8002f8c <TIM_Base_SetConfig+0xc4>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d108      	bne.n	8002f2c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	68fa      	ldr	r2, [r7, #12]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	695b      	ldr	r3, [r3, #20]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	68fa      	ldr	r2, [r7, #12]
 8002f3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	689a      	ldr	r2, [r3, #8]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4a0d      	ldr	r2, [pc, #52]	; (8002f88 <TIM_Base_SetConfig+0xc0>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d103      	bne.n	8002f60 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	691a      	ldr	r2, [r3, #16]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	691b      	ldr	r3, [r3, #16]
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d005      	beq.n	8002f7e <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	f023 0201 	bic.w	r2, r3, #1
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	611a      	str	r2, [r3, #16]
  }
}
 8002f7e:	bf00      	nop
 8002f80:	3714      	adds	r7, #20
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bc80      	pop	{r7}
 8002f86:	4770      	bx	lr
 8002f88:	40012c00 	.word	0x40012c00
 8002f8c:	40000400 	.word	0x40000400

08002f90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b087      	sub	sp, #28
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	60b9      	str	r1, [r7, #8]
 8002f9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6a1b      	ldr	r3, [r3, #32]
 8002fa0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6a1b      	ldr	r3, [r3, #32]
 8002fa6:	f023 0201 	bic.w	r2, r3, #1
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	011b      	lsls	r3, r3, #4
 8002fc0:	693a      	ldr	r2, [r7, #16]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	f023 030a 	bic.w	r3, r3, #10
 8002fcc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002fce:	697a      	ldr	r2, [r7, #20]
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	697a      	ldr	r2, [r7, #20]
 8002fe0:	621a      	str	r2, [r3, #32]
}
 8002fe2:	bf00      	nop
 8002fe4:	371c      	adds	r7, #28
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bc80      	pop	{r7}
 8002fea:	4770      	bx	lr

08002fec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b087      	sub	sp, #28
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6a1b      	ldr	r3, [r3, #32]
 8002ffc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6a1b      	ldr	r3, [r3, #32]
 8003002:	f023 0210 	bic.w	r2, r3, #16
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003016:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	031b      	lsls	r3, r3, #12
 800301c:	693a      	ldr	r2, [r7, #16]
 800301e:	4313      	orrs	r3, r2
 8003020:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003028:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	011b      	lsls	r3, r3, #4
 800302e:	697a      	ldr	r2, [r7, #20]
 8003030:	4313      	orrs	r3, r2
 8003032:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	693a      	ldr	r2, [r7, #16]
 8003038:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	697a      	ldr	r2, [r7, #20]
 800303e:	621a      	str	r2, [r3, #32]
}
 8003040:	bf00      	nop
 8003042:	371c      	adds	r7, #28
 8003044:	46bd      	mov	sp, r7
 8003046:	bc80      	pop	{r7}
 8003048:	4770      	bx	lr

0800304a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800304a:	b480      	push	{r7}
 800304c:	b085      	sub	sp, #20
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
 8003052:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003060:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003062:	683a      	ldr	r2, [r7, #0]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	4313      	orrs	r3, r2
 8003068:	f043 0307 	orr.w	r3, r3, #7
 800306c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	68fa      	ldr	r2, [r7, #12]
 8003072:	609a      	str	r2, [r3, #8]
}
 8003074:	bf00      	nop
 8003076:	3714      	adds	r7, #20
 8003078:	46bd      	mov	sp, r7
 800307a:	bc80      	pop	{r7}
 800307c:	4770      	bx	lr

0800307e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800307e:	b480      	push	{r7}
 8003080:	b087      	sub	sp, #28
 8003082:	af00      	add	r7, sp, #0
 8003084:	60f8      	str	r0, [r7, #12]
 8003086:	60b9      	str	r1, [r7, #8]
 8003088:	607a      	str	r2, [r7, #4]
 800308a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003098:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	021a      	lsls	r2, r3, #8
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	431a      	orrs	r2, r3
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	697a      	ldr	r2, [r7, #20]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	697a      	ldr	r2, [r7, #20]
 80030b0:	609a      	str	r2, [r3, #8]
}
 80030b2:	bf00      	nop
 80030b4:	371c      	adds	r7, #28
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bc80      	pop	{r7}
 80030ba:	4770      	bx	lr

080030bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80030bc:	b480      	push	{r7}
 80030be:	b085      	sub	sp, #20
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d101      	bne.n	80030d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80030d0:	2302      	movs	r3, #2
 80030d2:	e041      	b.n	8003158 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2202      	movs	r2, #2
 80030e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	68fa      	ldr	r2, [r7, #12]
 8003102:	4313      	orrs	r3, r2
 8003104:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	68fa      	ldr	r2, [r7, #12]
 800310c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a14      	ldr	r2, [pc, #80]	; (8003164 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d009      	beq.n	800312c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003120:	d004      	beq.n	800312c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a10      	ldr	r2, [pc, #64]	; (8003168 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d10c      	bne.n	8003146 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003132:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	68ba      	ldr	r2, [r7, #8]
 800313a:	4313      	orrs	r3, r2
 800313c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	68ba      	ldr	r2, [r7, #8]
 8003144:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2201      	movs	r2, #1
 800314a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003156:	2300      	movs	r3, #0
}
 8003158:	4618      	mov	r0, r3
 800315a:	3714      	adds	r7, #20
 800315c:	46bd      	mov	sp, r7
 800315e:	bc80      	pop	{r7}
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	40012c00 	.word	0x40012c00
 8003168:	40000400 	.word	0x40000400

0800316c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003174:	bf00      	nop
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	bc80      	pop	{r7}
 800317c:	4770      	bx	lr

0800317e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800317e:	b480      	push	{r7}
 8003180:	b083      	sub	sp, #12
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003186:	bf00      	nop
 8003188:	370c      	adds	r7, #12
 800318a:	46bd      	mov	sp, r7
 800318c:	bc80      	pop	{r7}
 800318e:	4770      	bx	lr

08003190 <__libc_init_array>:
 8003190:	b570      	push	{r4, r5, r6, lr}
 8003192:	2600      	movs	r6, #0
 8003194:	4d0c      	ldr	r5, [pc, #48]	; (80031c8 <__libc_init_array+0x38>)
 8003196:	4c0d      	ldr	r4, [pc, #52]	; (80031cc <__libc_init_array+0x3c>)
 8003198:	1b64      	subs	r4, r4, r5
 800319a:	10a4      	asrs	r4, r4, #2
 800319c:	42a6      	cmp	r6, r4
 800319e:	d109      	bne.n	80031b4 <__libc_init_array+0x24>
 80031a0:	f000 f822 	bl	80031e8 <_init>
 80031a4:	2600      	movs	r6, #0
 80031a6:	4d0a      	ldr	r5, [pc, #40]	; (80031d0 <__libc_init_array+0x40>)
 80031a8:	4c0a      	ldr	r4, [pc, #40]	; (80031d4 <__libc_init_array+0x44>)
 80031aa:	1b64      	subs	r4, r4, r5
 80031ac:	10a4      	asrs	r4, r4, #2
 80031ae:	42a6      	cmp	r6, r4
 80031b0:	d105      	bne.n	80031be <__libc_init_array+0x2e>
 80031b2:	bd70      	pop	{r4, r5, r6, pc}
 80031b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80031b8:	4798      	blx	r3
 80031ba:	3601      	adds	r6, #1
 80031bc:	e7ee      	b.n	800319c <__libc_init_array+0xc>
 80031be:	f855 3b04 	ldr.w	r3, [r5], #4
 80031c2:	4798      	blx	r3
 80031c4:	3601      	adds	r6, #1
 80031c6:	e7f2      	b.n	80031ae <__libc_init_array+0x1e>
 80031c8:	08003224 	.word	0x08003224
 80031cc:	08003224 	.word	0x08003224
 80031d0:	08003224 	.word	0x08003224
 80031d4:	08003228 	.word	0x08003228

080031d8 <memset>:
 80031d8:	4603      	mov	r3, r0
 80031da:	4402      	add	r2, r0
 80031dc:	4293      	cmp	r3, r2
 80031de:	d100      	bne.n	80031e2 <memset+0xa>
 80031e0:	4770      	bx	lr
 80031e2:	f803 1b01 	strb.w	r1, [r3], #1
 80031e6:	e7f9      	b.n	80031dc <memset+0x4>

080031e8 <_init>:
 80031e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031ea:	bf00      	nop
 80031ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031ee:	bc08      	pop	{r3}
 80031f0:	469e      	mov	lr, r3
 80031f2:	4770      	bx	lr

080031f4 <_fini>:
 80031f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031f6:	bf00      	nop
 80031f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031fa:	bc08      	pop	{r3}
 80031fc:	469e      	mov	lr, r3
 80031fe:	4770      	bx	lr
